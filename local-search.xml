<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World...Again...</title>
    <link href="/2021/04/18/Hello-World-Again/"/>
    <url>/2021/04/18/Hello-World-Again/</url>
    
    <content type="html"><![CDATA[<p>真的是好久好久好久没有更新博客了，主要是上次移动硬盘不慎遗失后，想要重构代码的时间开销实在是太大了。中途其实也写过不少新的博文，因为没有生成器源码的缘故陆陆续刷的发在了别处，也因为自己花了大量的时间和精力在魔改之前的博客模板上，舍不得丢弃。前些天面试网易的时候三面面试官发出了灵魂拷问，“为什么博客两年多没更新了”，略显尴尬，想着总是这么拖下去也不应该，这两年发生了很多事情，学习上，生活上，甚至还经历了有史以来第一次的冠状病毒大流行，一直到现在都还没有结束。不管是学到了什么，还是丢掉了什么，总有一些事情是值得纪念的，我才终于下定决心把所有之前的代码推倒重来。<br>之前的博客是用Hexo+Next主题实现的，并且慢慢摸索了很多前端的小技巧，魔改了很多官方版本不提供的功能。首当其冲的就是仿macOS的代码块，现在这个功能官方也提供了，本着标新立异的态度，我找到了这个新的主题<code>Fulid</code>,这次也会自己慢慢加一些小功能上去，然后这次一定会认真备份的。</p>]]></content>
    
    
    
    <tags>
      
      <tag>建站</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>模板-CODEVS3143 二叉树的序遍历</title>
    <link href="/2019/04/28/CODEVS_P3143/"/>
    <url>/2019/04/28/CODEVS_P3143/</url>
    
    <content type="html"><![CDATA[<p>水题…不过建树的方法值得参考的编号，</p><p>值得注意的是…x的值是一颗**完全二叉树， <code>tree[x]</code>的值才是数据中二叉树节点的编号（没有节点的地方都为零）…这也就是为什么我刚开始能过样例但是最后只过了$$\frac{2}{5}$$组</p><span id="more"></span><h2 id="题目描述-Description"><a href="#题目描述-Description" class="headerlink" title="题目描述 Description"></a>题目描述 Description</h2><p>求一棵二叉树的前序遍历，中序遍历和后序遍历</p><h2 id="输入描述-Input-Description"><a href="#输入描述-Input-Description" class="headerlink" title="输入描述 Input Description"></a>输入描述 Input Description</h2><p>第一行一个整数n，表示这棵树的节点个数。</p><p>接下来n行每行2个整数L和R。第i行的两个整数Li和Ri代表编号为i的节点的左儿子编号和右儿子编号。</p><h2 id="输出描述-Output-Description"><a href="#输出描述-Output-Description" class="headerlink" title="输出描述 Output Description"></a>输出描述 Output Description</h2><p>输出一共三行，分别为前序遍历，中序遍历和后序遍历。编号之间用空格隔开。</p><h2 id="样例输入-Sample-Input"><a href="#样例输入-Sample-Input" class="headerlink" title="样例输入 Sample Input"></a>样例输入 Sample Input</h2><blockquote><p> 5<br>2 3<br>4 5<br>0 0<br>0 0<br>0 0</p></blockquote><h2 id="样例输出-Sample-Output"><a href="#样例输出-Sample-Output" class="headerlink" title="样例输出 Sample Output"></a>样例输出 Sample Output</h2><blockquote><p>1 2 4 5 3<br>4 2 5 1 3<br>4 5 2 3 1</p></blockquote><h2 id="数据范围及提示-Data-Size-amp-Hint"><a href="#数据范围及提示-Data-Size-amp-Hint" class="headerlink" title="数据范围及提示 Data Size &amp; Hint"></a>数据范围及提示 Data Size &amp; Hint</h2><blockquote><p>n &lt;= 16</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-keyword">int</span> tree[<span class="hljs-number">20</span>];<br><span class="hljs-keyword">int</span> k;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">preorder</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (tree[x] == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span>;<br>    cout &lt;&lt; tree[x] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    <span class="hljs-built_in">preorder</span>(tree[x] * <span class="hljs-number">2</span>);<br>    <span class="hljs-built_in">preorder</span>(tree[x] * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">inorder</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (tree[x] == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-built_in">inorder</span>(tree[x] * <span class="hljs-number">2</span>);<br>    cout &lt;&lt; tree[x] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    <span class="hljs-built_in">inorder</span>(tree[x] * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">postorder</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (tree[x] == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-built_in">postorder</span>(tree[x] * <span class="hljs-number">2</span>);<br>    <span class="hljs-built_in">postorder</span>(tree[x] * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>);<br>    cout &lt;&lt; tree[x] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br>    tree[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        cin &gt;&gt; tree[i * <span class="hljs-number">2</span>] &gt;&gt; tree[i * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>];<br>    &#125;<br>    <span class="hljs-built_in">preorder</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-built_in">inorder</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-built_in">postorder</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法与数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>模板</tag>
      
      <tag>二叉树</tag>
      
      <tag>递归</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>模板-归并排序</title>
    <link href="/2019/04/28/template_mergesort/"/>
    <url>/2019/04/28/template_mergesort/</url>
    
    <content type="html"><![CDATA[<p>人老了之后真是做什么都事倍功半… 一个归并排序调试了我将近一个小时..</p><span id="more"></span><p>先贴代码…</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">int</span> a[<span class="hljs-number">101</span>], temp[<span class="hljs-number">101</span>];<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> mid)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>, i = l, j = mid + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r) &#123;<br>        a[i] &lt; a[j] ? temp[k++] = a[i++] : temp[k++] = a[j++];<br>    &#125;<br>    <span class="hljs-keyword">while</span> (i &lt;= mid) temp[k++] = a[i++];<br>    <span class="hljs-keyword">while</span> (j &lt;= r) temp[k++] = a[j++];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= k - <span class="hljs-number">1</span>; i++) &#123;<br>        a[l + i - <span class="hljs-number">1</span>] = temp[i];<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span> </span>&#123;<br><br>    <span class="hljs-keyword">if</span> (l &lt; r) &#123;<br>        <span class="hljs-keyword">int</span> center = (l + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-built_in">merge_sort</span>(l, center);<br>        <span class="hljs-built_in">merge_sort</span>(center + <span class="hljs-number">1</span>, r);<br>        <span class="hljs-built_in">Merge</span>(l, r, center);<br>    &#125;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        cin &gt;&gt; a[i];<br>    &#125;<br>    <span class="hljs-built_in">merge_sort</span>(<span class="hljs-number">1</span>, n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        cout &lt;&lt; a[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>遇到的问题</p><ul><li>左边界和右边界写反（我也不知道我在干什么…）</li><li>比较的时候实际上是左半边和右半边对应比较，然后较小的那一边的数字填入临时数组，指针往后移动一位</li><li>在递归过程里，数组的元素是固定不变的，变的是通过一个临时数组存放后返回的下标，也即是 顺摆放序。</li><li>递归边界（左右相等）</li></ul>]]></content>
    
    
    <categories>
      
      <category>算法与数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>算法</tag>
      
      <tag>模板</tag>
      
      <tag>递归</tag>
      
      <tag>排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows逆向学习笔记(一)</title>
    <link href="/2019/01/23/Windows_Reverse_Learning_1/"/>
    <url>/2019/01/23/Windows_Reverse_Learning_1/</url>
    
    <content type="html"><![CDATA[<p>好久没更新了，最近在学Windows端的逆向，看的是吾爱破解上ximo的教程，上来记个笔记,笔记的内容是关于手脱<code>UPX壳</code>和<code>ASPACK壳</code><br>现在还处于特别萌新的状态，暂时还没遇到什么特别大的问题。</p><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><p><code>OD</code>和<code>PEiD</code><br><img src="/images/Windows_Reverse_Learning_1/OD-min.jpg"></p><span id="more"></span> <p><img src="/images/Windows_Reverse_Learning_1/PeiD-min.jpg"></p><h1 id="OD常用快捷键"><a href="#OD常用快捷键" class="headerlink" title="OD常用快捷键"></a>OD常用快捷键</h1><blockquote><p>F4：运行到当前位置<br>F8：单步运行<br>F7: 进入函数（防止跑飞）<br>alt +M：查看内存 </p></blockquote><!-- more --> <h1 id="查找OEP（Original-Entry-Point-程序入口）"><a href="#查找OEP（Original-Entry-Point-程序入口）" class="headerlink" title="查找OEP（Original Entry Point 程序入口）"></a>查找OEP（Original Entry Point 程序入口）</h1><h2 id="对于UPX壳和ASPACK壳"><a href="#对于UPX壳和ASPACK壳" class="headerlink" title="对于UPX壳和ASPACK壳"></a>对于<code>UPX壳</code>和<code>ASPACK壳</code></h2><h3 id="1-单步跟踪法"><a href="#1-单步跟踪法" class="headerlink" title="1. 单步跟踪法"></a>1. 单步跟踪法</h3><p>从程序开始向下单步运行，向上的跳转使之实现，向下的跳转不让它实现（直接点击下一句然后运行到当前位置）</p><h3 id="2-ESP定律法"><a href="#2-ESP定律法" class="headerlink" title="2. ESP定律法"></a>2. ESP定律法</h3><p>运行到关键句的下一句发现ESP对应的地址变红 (ESP第一次改变时)<br>右键-&gt;在数据窗口跟随 或者<code>dd XXXXX</code>或者 <code>hr XXXXX</code>（对ESP的地址设置硬件字访问断点）<br>然后运行再单步跟踪</p><h3 id="3-2次内存镜像法"><a href="#3-2次内存镜像法" class="headerlink" title="3. 2次内存镜像法"></a>3. 2次内存镜像法</h3><p>按ALT+M,打开内存镜象，找到程序的第一个.rsrc.按F2下断点，然后按SHIFT+F9运 行到断点，接着再按ALT+M,打开内存镜象，找到程序的第一个.rsrc.上面的代码段.text（或者CODE）（也就是00401000处），按F2下断点。然后按SHIFT+F9（或者是在没异常情况下按F9）， 直接到达程序OEP</p><h3 id="4-一步直达法"><a href="#4-一步直达法" class="headerlink" title="4. 一步直达法"></a>4. 一步直达法</h3><p>看关键句pushad 直接右键查找popad （不要勾选 整个段）</p><p>对于 <code>ASPACK壳</code></p><h3 id="5-模拟跟踪法（慢）"><a href="#5-模拟跟踪法（慢）" class="headerlink" title="5. 模拟跟踪法（慢）"></a>5. 模拟跟踪法（慢）</h3><p> <code>alt + M</code> 然后输入<code>tc eip&lt;00430000</code>（<code>.aspack</code>对应地址）</p><h3 id="6-SFX"><a href="#6-SFX" class="headerlink" title="6. SFX"></a>6. SFX</h3><p> 选项-&gt;调试设置-&gt;SFX -&gt;块方式跟踪真正入口（不一定准确）</p><h1 id="脱壳"><a href="#脱壳" class="headerlink" title="脱壳"></a>脱壳</h1><h2 id="1-直接脱"><a href="#1-直接脱" class="headerlink" title="1. 直接脱"></a>1. 直接脱</h2><p>在OEP处右键-&gt;用OD脱壳调试进程-&gt;脱壳</p><h2 id="2-LordPE"><a href="#2-LordPE" class="headerlink" title="2.LordPE"></a>2.LordPE</h2><p>找到进程-&gt;右键修正镜像大小-&gt;右键完整转存<br><img src="/images/Windows_Reverse_Learning_1/3-min.jpg"><br>PS.如果脱壳后无法打开<br>importREC输入表重建<br>找到进程-&gt;输入OEP地址-&gt;自动查找IAT-&gt;获取输入表-&gt;显示无效函数-&gt;修复转存文件</p>]]></content>
    
    
    <categories>
      
      <category>Windows逆向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows逆向</tag>
      
      <tag>脱壳</tag>
      
      <tag>UnPackMe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>词频统计</title>
    <link href="/2018/12/28/wordcount/"/>
    <url>/2018/12/28/wordcount/</url>
    
    <content type="html"><![CDATA[<p>昨天在知乎上看到了一个统计书的词频的代码，但是原作用的分词是Python自带的split，很明显不支持中文<br>然后我就想统计一下《三体》中的词频，但是中文分词不好办<br>最后我找到了结巴分词，比较准确，速度也还不错。下面贴代码<br>注意要把file名根据实际情况改一下，然后停用词我用的是Github上的词库</p><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> collections<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> jieba<br><span class="hljs-comment"># 读入文件并指定编码</span><br>file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;1.txt&quot;</span> , encoding = <span class="hljs-string">&quot;utf8&quot;</span>)<br>book = file.read()<br><br><span class="hljs-comment">#停用词 </span><br>stopwords = [line.strip() <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;stopwords.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>).readlines()]<br><br><br>wordcount = &#123;&#125;<br><br>wordlist = jieba.lcut(book.lower() , cut_all = <span class="hljs-literal">False</span>);<br><br><span class="hljs-keyword">for</span> everyword <span class="hljs-keyword">in</span> wordlist:<br>   everyword = everyword.replace(<span class="hljs-string">&quot;.&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>   everyword = everyword.replace(<span class="hljs-string">&quot;,&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>   everyword = everyword.replace(<span class="hljs-string">&quot;:&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>   everyword = everyword.replace(<span class="hljs-string">&quot;\&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>   everyword = everyword.replace(<span class="hljs-string">&quot;!&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>   everyword = everyword.replace(<span class="hljs-string">&quot;a€?&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>   everyword = everyword.replace(<span class="hljs-string">&quot;a€?&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>   everyword = everyword.replace(<span class="hljs-string">&quot;*&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>   everyword = everyword.replace(<span class="hljs-string">&quot;）&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>   everyword = everyword.replace(<span class="hljs-string">&quot;（&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>   everyword = everyword.replace(<span class="hljs-string">&quot;《&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>   everyword = everyword.replace(<span class="hljs-string">&quot;》&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>   everyword = everyword.replace(<span class="hljs-string">&quot;？&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>   everyword = everyword.replace(<span class="hljs-string">&quot; :&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>   everyword = everyword.replace(<span class="hljs-string">&quot;，&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>   everyword = everyword.replace(<span class="hljs-string">&quot;。&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>   everyword = everyword.replace(<span class="hljs-string">&quot;…&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>   everyword = everyword.replace(<span class="hljs-string">&quot;！&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>   everyword = everyword.replace(<span class="hljs-string">&quot;“&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>   everyword = everyword.replace(<span class="hljs-string">&quot;”&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>   everyword = everyword.replace(<span class="hljs-string">&quot;：&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>   everyword = everyword.replace(<span class="hljs-string">&quot;、&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>   everyword = everyword.replace(<span class="hljs-string">&quot;—&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>   everyword = everyword.replace(<span class="hljs-string">&quot;；&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>   everyword = everyword.replace(<span class="hljs-string">&quot;\n&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>   everyword = everyword.replace(<span class="hljs-string">&quot;\n\n&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>   everyword = everyword.replace(<span class="hljs-string">&quot;\b&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>   everyword = everyword.replace(<span class="hljs-string">&quot;\t&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>   everyword = everyword.replace(<span class="hljs-string">&quot;\t\b&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>   everyword = everyword.replace(<span class="hljs-string">&quot;\u3000&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>   everyword = everyword.replace(<span class="hljs-string">&quot;[&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>   everyword = everyword.replace(<span class="hljs-string">&quot;]&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>   everyword = everyword.replace(<span class="hljs-string">&quot;?&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>   everyword = everyword.replace(<span class="hljs-string">&quot;-&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>   <span class="hljs-keyword">if</span> everyword <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> stopwords:<br>       <span class="hljs-keyword">if</span> everyword <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> wordcount:<br>           wordcount[everyword] = <span class="hljs-number">1</span><br>       <span class="hljs-keyword">else</span>:<br>           wordcount[everyword] += <span class="hljs-number">1</span><br>   <br><br><br><span class="hljs-comment"># 打印最常见词汇</span><br>n_print = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;您想要前多少个高频词: &quot;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n这是前 &#123;&#125; 个高频词\n&quot;</span>.<span class="hljs-built_in">format</span>(n_print))<br>word_counter = collections.Counter(wordcount)<br><span class="hljs-keyword">for</span> word, count <span class="hljs-keyword">in</span> word_counter.most_common(n_print):<br>   <span class="hljs-built_in">print</span>(word, <span class="hljs-string">&quot;: &quot;</span>, count)<br><br><span class="hljs-comment"># 关闭文件</span><br>file.close()<br></code></pre></td></tr></table></figure><p>下面是《地球往事三部曲的结果》</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs CMD">python C:\Users\MrTXN\Desktop\词频统计.py<br>Building prefix dict from the default dictionary ...<br>Loading model from cache C:\Users\MrTXN\AppData\Local\Temp\jieba.cache<br>Loading model cost <span class="hljs-number">2</span>.<span class="hljs-number">163</span> seconds.<br>Prefix dict has been built succesfully.<br>您想要前多少个高频词: <span class="hljs-number">20</span><br><br>这是前 <span class="hljs-number">20</span> 个高频词<br><br>中 :  <span class="hljs-number">3688</span><br>一个 :  <span class="hljs-number">3066</span><br>说 :  <span class="hljs-number">2748</span><br>没有 :  <span class="hljs-number">2136</span><br>程心 :  <span class="hljs-number">1324</span><br>已经 :  <span class="hljs-number">1278</span><br>现在 :  <span class="hljs-number">1278</span><br>世界 :  <span class="hljs-number">1245</span><br>罗辑 :  <span class="hljs-number">1200</span><br>可能 :  <span class="hljs-number">1188</span><br>看到 :  <span class="hljs-number">1112</span><br>知道 :  <span class="hljs-number">1098</span><br>号 :  <span class="hljs-number">976</span><br>地球 :  <span class="hljs-number">955</span><br>时 :  <span class="hljs-number">949</span><br>人类 :  <span class="hljs-number">933</span><br>太空 :  <span class="hljs-number">933</span><br>三体 :  <span class="hljs-number">895</span><br>宇宙 :  <span class="hljs-number">884</span><br>太阳 :  <span class="hljs-number">772</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>有意思的小东西</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CODEVSP2602 信与信封问题</title>
    <link href="/2018/12/23/CODEVS_P1222/"/>
    <url>/2018/12/23/CODEVS_P1222/</url>
    
    <content type="html"><![CDATA[<p>本来看题干以为是裸的二分图最大匹配问题，发现输入描述才说要输出确定的结果。所以最后还要再扫一遍<br>步骤是：<br>1.找出最大匹配，<br>2.枚举删除每条匹配边看匹配有没有改变匹配数，如果不能就说明这条边是关键边不能删除，直接输出即可。</p><h1 id="题目背景-Description"><a href="#题目背景-Description" class="headerlink" title="题目背景 Description"></a>题目背景 Description</h1><blockquote><p>John先生晚上写了n封信，并相应地写了n个信封将信装好，准备寄出。但是，第二天John的儿子Small John将这n封信都拿出了信封。不幸的是，Small John无法将拿出的信正确地装回信封中了。</p></blockquote><p>将Small John所提供的n封信依次编号为1，2，…，n；且n个信封也依次编号为1，2，…，n。假定Small John能提供一组信息：第i封信肯定不是装在信封j中。请编程帮助Small John，尽可能多地将信正确地装回信封</p><h1 id="输入描述-Input-Description"><a href="#输入描述-Input-Description" class="headerlink" title="输入描述 Input Description"></a>输入描述 Input Description</h1><blockquote><p>文件的第一行是一个整数n（n≤100）。信和信封依次编号为1，2，…，n。<br>接下来的各行中每行有2个数i和j，表示第i封信肯定不是装在第j个信封中。文件最后一行是2个0，表示结束。</p></blockquote><h1 id="输出描述-Output-Description"><a href="#输出描述-Output-Description" class="headerlink" title="输出描述 Output Description"></a>输出描述 Output Description</h1><blockquote><p>输出文件的各行中每行有2个数i和j，表示第i封信肯定是装在第j个信封中。请按信的编号i从小到大顺序输出。若不能确定正确装入信封的任何信件，则输出“none”。</p></blockquote><h1 id="样例输入-Sample-Input"><a href="#样例输入-Sample-Input" class="headerlink" title="样例输入 Sample Input"></a>样例输入 Sample Input</h1><blockquote><p>3 3<br>1 2<br>1 3<br>2 1<br>0 0</p></blockquote><h1 id="样例输出-Sample-Output"><a href="#样例输出-Sample-Output" class="headerlink" title="样例输出 Sample Output"></a>样例输出 Sample Output</h1><blockquote><p>1 1</p></blockquote><h1 id="数据范围及提示-Data-Size-amp-Hint"><a href="#数据范围及提示-Data-Size-amp-Hint" class="headerlink" title="数据范围及提示 Data Size &amp; Hint"></a>数据范围及提示 Data Size &amp; Hint</h1><span id="more"></span><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXN 2000</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">int</span> check[MAXN], matching[MAXN];<br><span class="hljs-keyword">int</span> n, x, y, ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> edge[MAXN][MAXN];<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n + <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">2</span> * n; i++) &#123;<br>    <span class="hljs-keyword">if</span> (edge[u][i] != <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">int</span> v = i;<br>      <span class="hljs-keyword">if</span> (!check[v]) &#123;<br>        check[v] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (matching[v] == <span class="hljs-number">-1</span> || <span class="hljs-built_in">dfs</span>(matching[v])) &#123;<br>          matching[v] = u;<br>          matching[u] = v;<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  cin &gt;&gt; n;<br>  <span class="hljs-built_in">memset</span>(edge, <span class="hljs-number">1</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(edge));<br>  <span class="hljs-keyword">while</span> (cin &gt;&gt; x &gt;&gt; y &amp;&amp; x != <span class="hljs-number">0</span> &amp;&amp; y != <span class="hljs-number">0</span>) &#123;<br>    edge[x][n + y] = <span class="hljs-number">0</span>;<br>    edge[n + y][x] = <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-built_in">memset</span>(matching, <span class="hljs-number">-1</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(matching));<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>    <span class="hljs-keyword">if</span> (matching[i] == <span class="hljs-number">-1</span>) &#123;<br>      <span class="hljs-built_in">memset</span>(check, <span class="hljs-number">0</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(check));<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">dfs</span>(i)) ans++;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">int</span> tot;<br>  <span class="hljs-keyword">int</span> flag = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>    <span class="hljs-built_in">memset</span>(check, <span class="hljs-number">0</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(check));<br>    <span class="hljs-keyword">int</span> v = matching[i];<br>    edge[i][v] = <span class="hljs-number">0</span>;<br>    edge[v][i] = <span class="hljs-number">0</span>;<br>    matching[v] = <span class="hljs-number">-1</span>;<br>    matching[i] = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">dfs</span>(i)) &#123;<br>      cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; v - n &lt;&lt; endl;<br>      matching[i] = v;<br>      matching[v] = i;<br>      flag = <span class="hljs-number">1</span>;<br>    &#125;<br>    edge[i][v] = <span class="hljs-number">1</span>;<br>    edge[v][i] = <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (!flag) cout &lt;&lt; <span class="hljs-string">&quot;none&quot;</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法与数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>算法</tag>
      
      <tag>图论</tag>
      
      <tag>二分图</tag>
      
      <tag>匈牙利算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CODEVSP2833 奇怪的梦境</title>
    <link href="/2018/12/20/CODEVS_P2833/"/>
    <url>/2018/12/20/CODEVS_P2833/</url>
    
    <content type="html"><![CDATA[<p>裸的拓扑排序，肯定还可以再优化，不过暴力出奇迹…<br>过段时间再填坑</p><h1 id="题目背景-Description"><a href="#题目背景-Description" class="headerlink" title="题目背景 Description"></a>题目背景 Description</h1><blockquote><p>Aiden陷入了一个奇怪的梦境：他被困在一个小房子中，墙上有很多按钮，还有一个屏幕，上面显示了一些信息。屏幕上说，要将所有按钮都按下才能出去，而又给出了一些信息，说明了某个按钮只能在另一个按钮按下之后才能按下，而没有被提及的按钮则可以在任何时候按下。可是Aiden发现屏幕上所给信息似乎有矛盾，请你来帮忙判断。</p></blockquote><h1 id="输入描述-Input-Description"><a href="#输入描述-Input-Description" class="headerlink" title="输入描述 Input Description"></a>输入描述 Input Description</h1><blockquote><p>第一行，两个数N，M，表示有编号为1…N这N个按钮，屏幕上有M条信息。<br>接下来的M行，每行两个数ai，bi，表示bi按钮要在ai之后按下。所给信息可能有重复，保证ai≠bi。</p></blockquote><h1 id="输出描述-Output-Description"><a href="#输出描述-Output-Description" class="headerlink" title="输出描述 Output Description"></a>输出描述 Output Description</h1><blockquote><p>若按钮能全部按下，则输出“o(∩_∩)o”。<br>若不能，第一行输出“T_T”，第二行输出因信息有矛盾而无法确认按下顺序的按钮的个数。输出不包括引号。</p></blockquote><h1 id="样例输入-Sample-Input"><a href="#样例输入-Sample-Input" class="headerlink" title="样例输入 Sample Input"></a>样例输入 Sample Input</h1><blockquote><p>3 3<br>1 2<br>2 3<br>3 2</p></blockquote><h1 id="样例输出-Sample-Output"><a href="#样例输出-Sample-Output" class="headerlink" title="样例输出 Sample Output"></a>样例输出 Sample Output</h1><blockquote><p>T_T<br>2</p></blockquote><h1 id="数据范围及提示-Data-Size-amp-Hint"><a href="#数据范围及提示-Data-Size-amp-Hint" class="headerlink" title="数据范围及提示 Data Size &amp; Hint"></a>数据范围及提示 Data Size &amp; Hint</h1><blockquote><p>对于30%的数据，保证0＜N≤100。<br>对于50%的数据，保证0＜N≤2000。<br>对于70%的数据，保证0＜N≤5000。<br>对于100%的数据，保证0＜N≤10000，0&lt;M≤2.5N。</p></blockquote><span id="more"></span><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXN 300000</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>  <span class="hljs-keyword">int</span> from;<br>  <span class="hljs-keyword">int</span> to;<br>  <span class="hljs-keyword">int</span> next;<br>&#125; edge[MAXN];<br><span class="hljs-keyword">int</span> s, t, edgecount = <span class="hljs-number">1</span>, pre[MAXN], innode[MAXN], circlecount;<br><span class="hljs-keyword">bool</span> deleted[MAXN];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span> </span>&#123;<br>  edge[edgecount].from = u;<br>  edge[edgecount].to = v;<br>  edge[edgecount].next = pre[u];<br>  pre[u] = edgecount++;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">int</span> n, m;<br>  <span class="hljs-built_in">memset</span>(pre, <span class="hljs-number">-1</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(pre));<br>  <span class="hljs-built_in">memset</span>(innode, <span class="hljs-number">0</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(innode));<br>  cin &gt;&gt; n &gt;&gt; m;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>    cin &gt;&gt; s &gt;&gt; t;<br>    <span class="hljs-built_in">addedge</span>(s, t);<br>    innode[t]++;<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k &lt;= n; k++)<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>      <span class="hljs-keyword">if</span> (innode[i] == <span class="hljs-number">0</span> &amp;&amp; !deleted[i]) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = pre[i]; j != <span class="hljs-number">-1</span>; j = edge[j].next) &#123;<br>          innode[edge[j].to]--;<br>        &#125;<br>        deleted[i] = <span class="hljs-number">1</span>;<br>      &#125;<br>    &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    <span class="hljs-keyword">if</span> (innode[i] != <span class="hljs-number">0</span>) circlecount++;<br><br>  <span class="hljs-keyword">if</span> (circlecount == <span class="hljs-number">0</span>)<br>    cout &lt;&lt; <span class="hljs-string">&quot;o(n_n)o&quot;</span>;<br>  <span class="hljs-keyword">else</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;T_T&quot;</span> &lt;&lt; endl &lt;&lt; circlecount;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法与数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>算法</tag>
      
      <tag>拓扑排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Noip2015 Day1 T2 信息传递</title>
    <link href="/2018/12/20/NOIP2015_Day1_T2/"/>
    <url>/2018/12/20/NOIP2015_Day1_T2/</url>
    
    <content type="html"><![CDATA[<p>梦开始结束的地方…<br>打了三个小时幻方的地方</p><h1 id="题目背景-Description"><a href="#题目背景-Description" class="headerlink" title="题目背景 Description"></a>题目背景 Description</h1><p>有个同学（编号为 1 到）正在玩一个信息传递的游戏。在游戏里每人都有一个固定的信息传递对象，其中，编号为的同学的信息传递对象是编号为的同学。游戏开始时，每人都只知道自己的生日。之后每一轮中，所有人会同时将自己当前所知的生日信息告诉各自的信息传递对象（注意：可能有人可以从若干人那里获取信息，但是每人只会把信息告诉一个人，即自己的信息传递对象）。当有人从别人口中得知自己的生日时，游戏结束。请问该游戏一共可以进行几轮？</p><h1 id="输入描述-Input-Description"><a href="#输入描述-Input-Description" class="headerlink" title="输入描述 Input Description"></a>输入描述 Input Description</h1><blockquote><p>输入共 2行。<br>第 1行包含1个正整数n，表示n个人<br>第 2 行包含n 个用空格隔开的正整数T1 ,T 2 ,……,Tn ， 其中第i个整数Ti表示编号为i的同学的信息传递对象是编号为 T i 的同学，Ti≤n 且 Ti≠i。<br>数据保证游戏一定会结束。</p></blockquote><h1 id="输出描述-Output-Description"><a href="#输出描述-Output-Description" class="headerlink" title="输出描述 Output Description"></a>输出描述 Output Description</h1><blockquote><p>输出共 1行，包含  1个整数，表示游戏一共可以进行多少轮。</p></blockquote><h1 id="样例输入-Sample-Input"><a href="#样例输入-Sample-Input" class="headerlink" title="样例输入 Sample Input"></a>样例输入 Sample Input</h1><blockquote><p>5<br>2 4 2 3 1</p></blockquote><h1 id="样例输出-Sample-Output"><a href="#样例输出-Sample-Output" class="headerlink" title="样例输出 Sample Output"></a>样例输出 Sample Output</h1><blockquote><p>3</p></blockquote><span id="more"></span> <h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXN 200001</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>  <span class="hljs-keyword">int</span> from;<br>  <span class="hljs-keyword">int</span> to;<br>  <span class="hljs-keyword">int</span> next;<br>&#125; edge[MAXN];<br>stack&lt;<span class="hljs-keyword">int</span>&gt; s;<br><span class="hljs-keyword">int</span> pre[MAXN];<br><span class="hljs-keyword">int</span> DFN[MAXN], LOW[MAXN], timecount;<br><span class="hljs-keyword">int</span> edgecount = <span class="hljs-number">1</span>, mingame = <span class="hljs-number">0x7fffffff</span>, tot, sfront;<br><span class="hljs-keyword">bool</span> instack[MAXN];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addnode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span> </span>&#123;<br>  edge[edgecount].from = u;<br>  edge[edgecount].to = v;<br>  edge[edgecount].next = pre[u];<br>  pre[u] = edgecount++;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">tarjan</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;<br>  LOW[u] = DFN[u] = ++timecount;<br>  s.<span class="hljs-built_in">push</span>(u);<br>  instack[u] = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = pre[u]; i != <span class="hljs-number">-1</span>; i = edge[i].next) &#123;<br>    <span class="hljs-keyword">if</span> (DFN[edge[i].to] == <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-built_in">tarjan</span>(edge[i].to);<br>      LOW[u] = <span class="hljs-built_in">min</span>(LOW[u], LOW[edge[i].to]);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (DFN[edge[i].to] != <span class="hljs-number">0</span> &amp;&amp; instack[edge[i].to] == <span class="hljs-number">1</span>) &#123;<br>      LOW[u] = <span class="hljs-built_in">min</span>(LOW[u], LOW[edge[i].to]);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (LOW[u] == DFN[u]) &#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">do</span> &#123;<br>      sfront = s.<span class="hljs-built_in">top</span>();<br>      instack[sfront] = <span class="hljs-number">0</span>;<br>      s.<span class="hljs-built_in">pop</span>();<br>      tot++;<br>    &#125; <span class="hljs-keyword">while</span> (LOW[sfront] != DFN[sfront]);<br>  &#125;<br>  <span class="hljs-keyword">if</span> (tot &lt; mingame &amp;&amp; tot &gt; <span class="hljs-number">1</span>) mingame = tot;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">int</span> n, t;<br>  <span class="hljs-built_in">memset</span>(pre, <span class="hljs-number">-1</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(pre));<br>  cin &gt;&gt; n;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>    cin &gt;&gt; t;<br>    <span class="hljs-built_in">addnode</span>(i, t);<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    <span class="hljs-keyword">if</span> (DFN[i] == <span class="hljs-number">0</span>) <span class="hljs-built_in">tarjan</span>(i);<br>  cout &lt;&lt; mingame;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法与数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>算法</tag>
      
      <tag>图论</tag>
      
      <tag>Tarjan</tag>
      
      <tag>强连通分量</tag>
      
      <tag>DFS</tag>
      
      <tag>有向图</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CODEVSP2602 最短路径问题</title>
    <link href="/2018/12/19/CODEVS_P2602/"/>
    <url>/2018/12/19/CODEVS_P2602/</url>
    
    <content type="html"><![CDATA[<p>本来是想刷板子的，结果发现有个点怎么都过不了…<br>才发现是SPFA理解上出现了偏差，和<code>bfs</code>产生了混淆，问题就在于<code>bfs</code>中一个点出了队列就不可能重新进入队列，但是<code>SPFA</code>是有可能的。<br>那么当初考NOIP的时候有道题不会做能拿<code>SPFA</code>混20分完全就是运气好了… 顿时有一些小小的忧伤。</p><h1 id="题目背景-Description"><a href="#题目背景-Description" class="headerlink" title="题目背景 Description"></a>题目背景 Description</h1><p>平面上有n个点（n&lt;=100），每个点的坐标均在-10000~10000之间。其中的一些点之间有连线。若有连线，则表示可从一个点到达另一个点，即两点间有通路，通路的距离为两点间的直线距离。现在的任务是找出从一点到另一点之间的最短路径。</p><h1 id="输入描述-Input-Description"><a href="#输入描述-Input-Description" class="headerlink" title="输入描述 Input Description"></a>输入描述 Input Description</h1><blockquote><p>第一行为整数n。<br>第2行到第n+1行（共n行），每行两个整数x和y，描述了一个点的坐标。<br>第n+2行为一个整数m，表示图中连线的个数。<br>此后的m行，每行描述一条连线，由两个整数i和j组成，表示第i个点和第j个点之间有连线。<br>最后一行：两个整数s和t，分别表示源点和目标点。</p></blockquote><h1 id="输出描述-Output-Description"><a href="#输出描述-Output-Description" class="headerlink" title="输出描述 Output Description"></a>输出描述 Output Description</h1><blockquote><p>仅一行，一个实数（保留两位小数），表示从s到t的最短路径长度。</p></blockquote><h1 id="样例输入-Sample-Input"><a href="#样例输入-Sample-Input" class="headerlink" title="样例输入 Sample Input"></a>样例输入 Sample Input</h1><blockquote><p>5<br>0 0<br>2 0<br>2 2<br>0 2<br>3 1<br>5<br>1 2<br>1 3<br>1 4<br>2 5<br>3 5<br>1 5</p></blockquote><h1 id="样例输出-Sample-Output"><a href="#样例输出-Sample-Output" class="headerlink" title="样例输出 Sample Output"></a>样例输出 Sample Output</h1><blockquote><p>3.41</p></blockquote><span id="more"></span><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="SPFA"><a href="#SPFA" class="headerlink" title="SPFA"></a>SPFA</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">bool</span> visited[<span class="hljs-number">10010</span>];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    <span class="hljs-keyword">int</span> from;<br>    <span class="hljs-keyword">int</span> to;<br>    <span class="hljs-keyword">double</span> weight;<br>    <span class="hljs-keyword">int</span> next;<br>&#125; edge[<span class="hljs-number">10010</span>];<br><span class="hljs-keyword">double</span> dis[<span class="hljs-number">10010</span>];<br><span class="hljs-keyword">int</span> x[<span class="hljs-number">10010</span>] , y[<span class="hljs-number">10010</span>] , pre[<span class="hljs-number">10010</span>] , edgecount;<br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">getdistance</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x1 , <span class="hljs-keyword">int</span> x2 , <span class="hljs-keyword">int</span> y1 , <span class="hljs-keyword">int</span> y2)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sqrt</span>((x1-x2)*(x1-x2) + (y1-y2)*(y1-y2));<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addnode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u , <span class="hljs-keyword">int</span> v , <span class="hljs-keyword">double</span> w)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[++edgecount].to = v;<br>    edge[edgecount].from = u;<br>    edge[edgecount].next = pre[u];<br>    edge[edgecount].weight = w;<br>    pre[u] = edgecount;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">spfa</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s , <span class="hljs-keyword">int</span> t)</span></span><br><span class="hljs-function"></span>&#123;<br>    queue &lt;<span class="hljs-keyword">int</span>&gt; q;<br>    q.<span class="hljs-built_in">push</span>(s);<br>    visited[s] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        <span class="hljs-keyword">int</span> temp = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        visited[temp] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = pre[temp] ; i != <span class="hljs-number">-1</span> ; i = edge[i].next)<br>        &#123;<br>            <span class="hljs-keyword">int</span> v = edge[i].to;<br>            <span class="hljs-keyword">if</span>(dis[v] &gt; dis[temp] + edge[i].weight)<br>            &#123;<br>                dis[v] = dis[temp] + edge[i].weight;<br>                <span class="hljs-keyword">if</span>(!visited[v])<br>                &#123;<br>                    q.<span class="hljs-built_in">push</span>(v);<br>                    visited[v] = <span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> s , t , n , m , p1 , p2;<br>    <span class="hljs-keyword">double</span> distance;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span> ; i &lt;= n ; i++)<br>    &#123;<br>        cin &gt;&gt; x[i] &gt;&gt; y[i];<br>    &#125;<br>    cin &gt;&gt; m;<br>    <span class="hljs-built_in">memset</span>(pre , <span class="hljs-number">-1</span> , <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(pre));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span> ; i &lt;= n ; i++)<br>        dis[i] = <span class="hljs-number">0x7ffff</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span> ; i &lt;= m ; i++)<br>    &#123;<br>        cin &gt;&gt; p1 &gt;&gt; p2;<br>        distance = <span class="hljs-built_in">getdistance</span>(x[p1] , x[p2] , y[p1] , y[p2]);<br>        <span class="hljs-built_in">addnode</span>(p1 , p2 , distance);<br>        <span class="hljs-built_in">addnode</span>(p2 , p1 , distance);<br>    &#125;<br>    cin &gt;&gt; s &gt;&gt; t;<br>    dis[s] = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">spfa</span>(s,t);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.2lf&quot;</span> , dis[t]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXN 2020</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    <span class="hljs-keyword">int</span> from;<br>    <span class="hljs-keyword">int</span> to;<br>    <span class="hljs-keyword">int</span> next;<br>    <span class="hljs-keyword">double</span> weight;<br>&#125; edge[MAXN];<br><span class="hljs-keyword">int</span> edgecount = <span class="hljs-number">1</span> , x[MAXN] , y[MAXN] , pre[MAXN] , n , m , p1 , p2 , s , t ;<br><span class="hljs-keyword">bool</span> visited[MAXN];<br><span class="hljs-keyword">double</span> dis[MAXN];<br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">getdistance</span><span class="hljs-params">(<span class="hljs-keyword">int</span> point1 , <span class="hljs-keyword">int</span> point2)</span> </span>&#123;<br>    <span class="hljs-keyword">double</span> weight = <span class="hljs-built_in">sqrt</span>((x[point1] - x[point2])*(x[point1] - x[point2]) + (y[point1] - y[point2])*(y[point1] - y[point2]));<br>    <span class="hljs-keyword">return</span> weight;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addnode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u , <span class="hljs-keyword">int</span> v ,<span class="hljs-keyword">double</span> w)</span> </span>&#123;<br>    edge[edgecount].from = u;<br>    edge[edgecount].to = v;<br>    edge[edgecount].weight = w;<br>    edge[edgecount].next = pre[u];<br>    pre[u] = edgecount++;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s , <span class="hljs-keyword">int</span> t)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> mini;<br>    <span class="hljs-keyword">int</span> mini_num;<br>    dis[s] = <span class="hljs-number">0</span>;<br>    visited[s] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = pre[s] ; i != <span class="hljs-number">-1</span> ; i = edge[i].next)<br>    &#123;<br>        dis[edge[i].to] = edge[i].weight;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span> ; j &lt;= n<span class="hljs-number">-1</span> ; j++)<br>    &#123;<br>        mini = <span class="hljs-number">0x7fffffff</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span> ; i &lt;= n ; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(mini &gt; dis[i] &amp;&amp; !visited[i])<br>            &#123;<br>                mini = dis[i];<br>                mini_num = i;<br><br>            &#125;<br>        &#125;<br>        visited[mini_num] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = pre[mini_num] ; i != <span class="hljs-number">-1</span> ; i = edge[i].next)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(dis[edge[i].to] &gt; dis[mini_num] + edge[i].weight)<br>                dis[edge[i].to] = dis[mini_num] + edge[i].weight;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dis[t];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(pre , <span class="hljs-number">-1</span> , <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(pre));<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span> , &amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span> ; i &lt;= n ; i++)<br>        dis[i] = <span class="hljs-number">0x7fffffff</span>;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span> ; i &lt;= n ; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span> , &amp;x[i] , &amp;y[i]);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span> , &amp;m);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span> ; i &lt;= m ; i++)<br>    &#123;<br>        cin &gt;&gt; p1 &gt;&gt; p2;<br>        <span class="hljs-built_in">addnode</span>(p1 , p2 , <span class="hljs-built_in">getdistance</span>(p1 , p2));<br>        <span class="hljs-built_in">addnode</span>(p2 , p1 , <span class="hljs-built_in">getdistance</span>(p1 , p2));<br>    &#125;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span> , &amp;s , &amp;t);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.2lf&quot;</span> , <span class="hljs-built_in">dijkstra</span>(s , t));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法与数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>算法</tag>
      
      <tag>图论</tag>
      
      <tag>邻接表</tag>
      
      <tag>最短路</tag>
      
      <tag>SPFA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>洛谷P1111 修复公路</title>
    <link href="/2018/12/18/luogu_P1111/"/>
    <url>/2018/12/18/luogu_P1111/</url>
    
    <content type="html"><![CDATA[<p>Kruskal模板题，应该还可以优化，过段时间再填坑…</p><h1 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h1><p>A地区在地震过后，连接所有村庄的公路都造成了损坏而无法通车。政府派人修复这些公路。</p><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给出A地区的村庄数N，和公路数M，公路是双向的。并告诉你每条公路的连着哪两个村庄，并告诉你什么时候能修完这条公路。问最早什么时候任意两个村庄能够通车，即最早什么时候任意两条村庄都存在至少一条修复完成的道路（可以由多条公路连成一条道路）</p><h1 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h1><h2 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h2><p>第1行两个正整数N,MN,M<br>下面M行，每行3个正整数x, y, t，告诉你这条公路连着x,y两个村庄，在时间t时能修复完成这条公路。</p><h2 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h2><p>如果全部公路修复完毕仍然存在两个村庄无法通车，则输出-1，否则输出最早什么时候任意两个村庄能够通车。</p><span id="more"></span> <h1 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h1><h2 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h2><blockquote><p>4 4<br>1 2 6<br>1 3 4<br>1 4 5<br>4 2 3</p></blockquote><h2 id="输出样例1："><a href="#输出样例1：" class="headerlink" title="输出样例1："></a>输出样例1：</h2><blockquote><p>5</p></blockquote><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><blockquote><p>N ≤ 1000,M ≤ 100000 N ≤ 1000,M ≤ 100000<br>x ≤ N,y &lt;= N,t &lt;= 100000 x ≤ N,y ≤ N,t ≤ 100000</p></blockquote><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt; iostream &gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt; algorithm &gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span> &#123;</span><br>    <span class="hljs-keyword">int</span> from;<br>    <span class="hljs-keyword">int</span> to;<br>    <span class="hljs-keyword">int</span> cost;<br>&#125;<br>road[<span class="hljs-number">100000</span>];<br><span class="hljs-keyword">int</span> roadnum, n, m, totalcost;<br><span class="hljs-keyword">int</span> father[<span class="hljs-number">100000</span>];<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(edge x, edge y)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> x.cost &lt; y.cost;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setfather</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-comment">//初始化函数</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>        father[i] = i;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getfather</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<span class="hljs-comment">//找爸爸</span><br>    <span class="hljs-keyword">if</span> (father[x] != x) <span class="hljs-comment">//如果x的父节点不是x 那么x不是跟节点，所以继续找x的父节点的父节点</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">getfather</span>(father[x]);<br>    <span class="hljs-keyword">return</span> father[x];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">unite</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123; <span class="hljs-comment">//合并</span><br>    x = <span class="hljs-built_in">getfather</span>(x);<br>    y = <span class="hljs-built_in">getfather</span>(y);<br>    <span class="hljs-keyword">if</span> (x != y) &#123; <span class="hljs-comment">// x ，y 不属于同一个集合就合并</span><br>        father[y] = x; <span class="hljs-comment">//x 成为 y 的父节点</span><br>        roadnum++; <span class="hljs-comment">//道路总数加一</span><br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>        cin &gt;&gt; road[i].from &gt;&gt; road[i].to &gt;&gt; road[i].cost;<br>    <span class="hljs-built_in">sort</span>(road + <span class="hljs-number">1</span>, road + m + <span class="hljs-number">1</span>, cmp); <span class="hljs-comment">//Kruskal 按边权升序排序</span><br>    <span class="hljs-built_in">setfather</span>(); <span class="hljs-comment">//初始化 令所有节点的父节点为本身（将点集加入新图）</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>        <span class="hljs-built_in">unite</span>(road[i].from, road[i].to); <br>        <span class="hljs-keyword">if</span> (roadnum == n - <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">//如果道路数等于村庄数减一，说明最小生成树已形成</span><br>            totalcost = road[i].cost; <span class="hljs-comment">//总的时间消耗等于 消耗时间最长的那条路的时间消耗</span><br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-keyword">if</span> (roadnum != n - <span class="hljs-number">1</span>) cout &lt;&lt; <span class="hljs-number">-1</span>; <br>    <span class="hljs-keyword">else</span><br>        cout &lt;&lt; totalcost;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法与数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>算法</tag>
      
      <tag>图论</tag>
      
      <tag>并查集</tag>
      
      <tag>克鲁斯卡尔</tag>
      
      <tag>Kruskal</tag>
      
      <tag>最小生成树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客建站记录(二)</title>
    <link href="/2018/12/15/blog_setup_2/"/>
    <url>/2018/12/15/blog_setup_2/</url>
    
    <content type="html"><![CDATA[<p>昨天测试了一下网页的打开速度，感觉还是稍慢了一点，于是今天就想把博客优化一下。<br>最简单的优化方式当然是用<code>gulp</code>把静态资源压缩了，可是<code>gulp</code>在4.0的时候更新了一些新的特性，导致网上的教程都失效了，我找了很长时间才发现。这里把新版的教程贴出来</p><h1 id="gulp简介"><a href="#gulp简介" class="headerlink" title="gulp简介"></a>gulp简介</h1><p><code>Gulp.js</code>(<a href="https://www.gulpjs.com.cn/">官网</a>)是一种基于流的，代码优于配置的新一代构建工具。</p><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><h2 id="安装所需依赖"><a href="#安装所需依赖" class="headerlink" title="安装所需依赖"></a>安装所需依赖</h2><p>首先到根目录下执行</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">npm install gulp-minify-css gulp-babel gulp-uglify gulp-htmlmin gulp-htmlclean --save-dev<br></code></pre></td></tr></table></figure><h2 id="安装gulp"><a href="#安装gulp" class="headerlink" title="安装gulp"></a>安装gulp</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">npm install gulp -g<br></code></pre></td></tr></table></figure><span id="more"></span> <h1 id="建立gulpfile-js"><a href="#建立gulpfile-js" class="headerlink" title="建立gulpfile.js"></a>建立gulpfile.js</h1><p>在根目录下新建一个<code>gulpfile.js</code>文件<br>一般来说直接安装<code>gulp</code>会安装最新版的，也就是4.0以上的，<code>gulp 4</code>最大的变化就是你不能像以前那样传递一个依赖任务列表，而必须制定是<code>gulp.series</code>(顺序执行<br>)还是<code>gulp.paralle</code>(并行计算)所以网上那些针对4.0以前的<code>gulpfile.js</code>都过时了，取而代之的是以下内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> gulp = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp&#x27;</span>);<br><span class="hljs-keyword">var</span> babel = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-babel&#x27;</span>);<br><span class="hljs-keyword">var</span> minifycss = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-minify-css&#x27;</span>);<br><span class="hljs-keyword">var</span> uglify = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-uglify&#x27;</span>);<br><span class="hljs-keyword">var</span> htmlmin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-htmlmin&#x27;</span>);<br><span class="hljs-keyword">var</span> htmlclean = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-htmlclean&#x27;</span>);<br><span class="hljs-keyword">var</span> imageMin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-imagemin&#x27;</span>);<br><span class="hljs-comment">// 压缩 public 目录 css</span><br>gulp.task(<span class="hljs-string">&#x27;minify-css&#x27;</span>, gulp.series(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> gulp.src(<span class="hljs-string">&#x27;./public/**/*.css&#x27;</span>)<br>    .pipe(minifycss())<br>    .pipe(gulp.dest(<span class="hljs-string">&#x27;./public&#x27;</span>));<br>&#125;));<br><span class="hljs-comment">// 压缩 public 目录 html</span><br>gulp.task(<span class="hljs-string">&#x27;minify-html&#x27;</span>, gulp.series(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> gulp.src(<span class="hljs-string">&#x27;./public/**/*.html&#x27;</span>)<br>    .pipe(htmlclean())<br>    .pipe(htmlmin(&#123;<br>      removeComments: <span class="hljs-literal">true</span>,<br>      minifyJS: <span class="hljs-literal">true</span>,<br>      minifyCSS: <span class="hljs-literal">true</span>,<br>      minifyURLs: <span class="hljs-literal">true</span>,<br>    &#125;))<br>    .pipe(gulp.dest(<span class="hljs-string">&#x27;./public&#x27;</span>))<br>&#125;));<br><span class="hljs-comment">// 压缩 public/js 目录 js</span><br>gulp.task(<span class="hljs-string">&#x27;minify-js&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> gulp.src(<span class="hljs-string">&#x27;./public/**/*.js&#x27;</span>)<br>          .pipe(uglify())<br>          .pipe(gulp.dest(<span class="hljs-string">&#x27;./public&#x27;</span>));<br>&#125;);<br><span class="hljs-comment">// 压缩图片</span><br>gulp.task(<span class="hljs-string">&#x27;images&#x27;</span>, gulp.series(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> gulp.src(<span class="hljs-string">&#x27;./public/**/*.&#123;png,jpg,gif,ico,svg&#125;&#x27;</span>)<br>    .pipe(imageMin(&#123;<br>      progressive: <span class="hljs-literal">true</span><br>    &#125;))<br>    .pipe(gulp.dest(<span class="hljs-string">&#x27;./public&#x27;</span>))<br>&#125;))<br><span class="hljs-comment">// 执行 gulp 命令时执行的任务</span><br>gulp.task(<span class="hljs-string">&#x27;default&#x27;</span>, gulp.parallel(<br>  <span class="hljs-string">&#x27;minify-html&#x27;</span>, <span class="hljs-string">&#x27;minify-css&#x27;</span>, <span class="hljs-string">&#x27;minify-js&#x27;</span>, <span class="hljs-string">&#x27;images&#x27;</span><br>));<br></code></pre></td></tr></table></figure><p>当然最后是<code>gulp.parallel</code>还是<code>gulp.series</code>可以根据实际情况进行更改</p><h1 id="压缩方法"><a href="#压缩方法" class="headerlink" title="压缩方法"></a>压缩方法</h1><p>在进行<code>hexo g</code>和<code>hexo s</code>/<code>hexo d</code>中间加一行命令<code>gulp</code><br>执行结果如图<br><img src="/images/blog_setup2/blog_setup_2.1.PNG"><br>压缩之后的访问速度接近原来的两倍</p><h1 id="偷个小懒"><a href="#偷个小懒" class="headerlink" title="偷个小懒"></a>偷个小懒</h1><p>我们可以创建一个<code>publish</code>命令代替我们进行几次输入<br>打开根目录下的<code>package.json</code>然后在<code>scripts</code>下增加一个<code>publish</code>命令</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;publish&quot;</span>: <span class="hljs-string">&quot;hexo cl &amp;&amp; hexo g &amp;&amp; gulp &amp;&amp; hexo d&quot;</span>,<br>    <span class="hljs-attr">&quot;test&quot;</span>: <span class="hljs-string">&quot;hexo cl &amp;&amp; hexo g &amp;&amp; gulp &amp;&amp; hexo s&quot;</span>,<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后部署和测试的时候只需要一行命令就可以搞定<br>测试:</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">npm run test<br></code></pre></td></tr></table></figure><p>部署:</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">npm run publish<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>博客相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>建站</tag>
      
      <tag>前端</tag>
      
      <tag>博客</tag>
      
      <tag>优化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客建站记录（一）</title>
    <link href="/2018/12/14/blog_setup_1/"/>
    <url>/2018/12/14/blog_setup_1/</url>
    
    <content type="html"><![CDATA[<p>前几天心血来潮把博客迁移到GitHub Pages上来了，踩了很多很多坑，特开一文作为记录</p><h1 id="1-主题"><a href="#1-主题" class="headerlink" title="1.主题"></a>1.主题</h1><p>主题当然是用的 最常见的NexT.Pisces 版本是截止目前最新的v6.6.0，其实中途我也用过Material，无奈最后一次更新已是三个月前，而且稳定版都无法正常运行，在网上找到的解决方案，虽然能正常运行却也会报很多错，Next的更新很及时，也是最受到好评的模板之一。</p><h1 id="2-球型标签云"><a href="#2-球型标签云" class="headerlink" title="2.球型标签云"></a>2.球型标签云</h1><p>这个还算比较好实现，有了在Material上实现的经历，我把它移植到Next上只用了不到十分钟<br>用到的是一个叫做tagcanvas的js插件 <a href="http://www.goat1000.com/tagcanvas.php">tagcanvas官方介绍页面</a><br>我用的是独立版的tagcanvas.js ,下载下来以后扔到themes/next/js下<br>修改themes/next/layout/_partial/page-tags.ejs如下</p><span id="more"></span> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs EJS">&lt;hr&gt;<br>&lt;br&gt;<br>&lt;%- list_categories() %&gt;<br>&lt;script src&#x3D;&quot;&#x2F;js&#x2F;tagcanvas.js&quot; type&#x3D;&quot;text&#x2F;javascript&quot;&gt;&lt;&#x2F;script&gt;<br>&lt;div class&#x3D;&quot;tags&quot; id&#x3D;&quot;myTags&quot;&gt;<br> &lt;canvas width&#x3D;&quot;350&quot; height&#x3D;&quot;350&quot; id&#x3D;&quot;my3DTags&quot;&gt;<br>    &lt;p&gt;Anything in here will be replaced on browsers that support the canvas element&lt;&#x2F;p&gt;<br>&lt;&#x2F;canvas&gt;<br>&lt;&#x2F;div&gt;<br>&lt;div class&#x3D;&quot;tags&quot; id&#x3D;&quot;tags&quot;&gt;<br> &lt;ul&gt;<br>  &lt;%- tagcloud(&#123;<br>      min_font: 16,<br>      max_font: 35,<br>      amount: 999,<br>      color: true,<br>      start_color: &#39;blue&#39;,<br>      end_color: &#39;red&#39;,<br>  &#125;) %&gt;<br> &lt;&#x2F;ul&gt;<br>&lt;&#x2F;div&gt;<br>&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;<br>    .category-list li, .tags li&#123;<br>        display: inline;<br>        font-size: 1.2em;<br>        margin-right: 1em;<br>        line-height: 60px;<br>        border: 1px solid lightgray;<br>        padding: 6px;<br>    &#125;<br>    .category-list a &#123;<br>        color: gray;<br>    &#125;<br>    .category-list:hover a &#123;<br>        color: gray;<br>        text-decoration: none;<br>        font-weight: bold;<br>    &#125;<br>    .category-list-count &#123;<br>        margin-left: 2px;<br>        font-size: .9em;<br>    &#125;<br>    .article-entry ul li:before&#123;<br>        display: none;<br>    &#125;<br>    .article-inner  &#123;<br>        text-align: center;<br>    &#125;<br>    .article-meta &#123;<br>        display: none;<br>    &#125;<br>    .article-header &#123;<br>        padding-right: 35px;<br>    &#125;<br>    #container .article .article-title &#123;<br>        padding-right: 0;<br>    &#125;<br>    .tags &#123;<br>        max-width: 40em;<br>        margin: 2em auto;<br>        margin-top: 0em;<br>    &#125;<br>    .tags a &#123;<br>        margin-right: 1em;<br>        line-height: 65px;<br>        border-bottom: 1px solid gray;<br>    &#125;<br>    .tags a:hover &#123;<br>        font-weight: bold;<br>        text-decoration: none;<br>    &#125;<br>    .category-list-child &#123;<br>        display: none;<br>    &#125;<br>&lt;&#x2F;style&gt;<br>&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;<br>    window.onload &#x3D; function() &#123;<br>        try &#123;<br>          TagCanvas.Start(&#39;my3DTags&#39;,&#39;tags&#39;,&#123;<br>            textFont: &#39;Georgia,Optima&#39;,<br>            textColour: null,<br>            outlineColour: &#39;#ff00ff&#39;,<br>            weight: true,<br>            reverse: true,<br>            depth: 0.8,<br>            maxSpeed: 0.05,<br>            bgRadius: 1,<br>            freezeDecel: true<br>          &#125;);<br>        &#125; catch(e) &#123;<br>          &#x2F;&#x2F; something went wrong, hide the canvas container<br>          document.getElementById(&#39;myTags&#39;).style.display &#x3D; &#39;none&#39;;<br>        &#125;<br>      &#125;;<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure><p>配置参数在TagCanvas.Start();参数表中，<a href="http://www.goat1000.com/tagcanvas-options.php">这里</a>有具体配置选项</p><p>接着打开\themes\next\layout_macro\sidebar.swig 在</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml">&#123;% if site.tags.length &gt; 0 %&#125;</span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/tagcloud.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/tagcanvas.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;widget-wrap&quot;</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;widget-title&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myCanvasContainer&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;widget tagcloud&quot;</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;225&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;225&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;resCanvas&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width=100%&quot;</span>&gt;</span></span><br><span class="xml">                    </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">list_tags</span>() &#125;&#125;</span><br><span class="xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>下方加入</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">if</span></span> site.tags.length &gt; 0 %&#125;</span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/tagcloud.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">     <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/tagcanvas.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;widget-wrap&quot;</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;widget-title&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myCanvasContainer&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;widget tagcloud&quot;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;225&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;225&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;resCanvas&quot;</span><span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width=100%&quot;</span>&gt;</span></span><br><span class="xml">                    </span><span class="hljs-template-variable">&#123;&#123; list_tags() &#125;&#125;</span><br><span class="xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><br></code></pre></td></tr></table></figure><p>参考 <a href="http://www.netcan666.com/2015/12/15/Hexo%E4%B8%AA%E6%80%A7%E5%8C%96%E7%90%83%E5%BD%A2%E6%A0%87%E7%AD%BE%E4%BA%91/#%E6%95%88%E6%9E%9C%E5%9B%BE">Netcan_Space</a></p><h1 id="3-旋转头像"><a href="#3-旋转头像" class="headerlink" title="3.旋转头像"></a>3.旋转头像</h1><p>修改themes/next/source/css/_common/components/sidebar/sidebar-author.styl</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-class">.site-author-image</span> &#123;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-variable">$site</span>-author-image-padding;<br>  <span class="hljs-attribute">max-width</span>: <span class="hljs-variable">$site</span>-author-image-width;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-variable">$site</span>-author-image-height;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-variable">$site</span>-author-image-border-width solid <span class="hljs-variable">$site</span>-author-image-border-color;<br>  <span class="hljs-comment">/* 头像圆形 */</span><br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">80px</span>;<br>  -webkit-<span class="hljs-attribute">border-radius</span>: <span class="hljs-number">80px</span>;<br>  -moz-<span class="hljs-attribute">border-radius</span>: <span class="hljs-number">80px</span>;<br>  <span class="hljs-attribute">box-shadow</span>: inset <span class="hljs-number">0</span> -<span class="hljs-number">1px</span> <span class="hljs-number">0</span> <span class="hljs-number">#333</span>sf;<br>  <span class="hljs-comment">/* 设置循环动画 [animation: (play)动画名称 (2s)动画播放时长单位秒或微秒 (ase-out)动画播放的速度曲线为以低速结束 </span><br><span class="hljs-comment">    (1s)等待1秒然后开始动画 (1)动画播放次数(infinite为循环播放) ]*/</span><br>  -webkit-<span class="hljs-attribute">animation</span>: play <span class="hljs-number">2s</span> ease-out <span class="hljs-number">1s</span> <span class="hljs-number">1</span>;<br>  -moz-<span class="hljs-attribute">animation</span>: play <span class="hljs-number">2s</span> ease-out <span class="hljs-number">1s</span> <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">animation</span>: play <span class="hljs-number">2s</span> ease-out <span class="hljs-number">1s</span> <span class="hljs-number">1</span>; <br>  <span class="hljs-comment">/* 鼠标经过头像旋转360度 */</span><br>  -webkit-<span class="hljs-attribute">transition</span>: -webkit-transform <span class="hljs-number">1.5s</span> ease-out;<br>  -moz-<span class="hljs-attribute">transition</span>: -moz-transform <span class="hljs-number">1.5s</span> ease-out;<br>  <span class="hljs-attribute">transition</span>: transform <span class="hljs-number">1.5s</span> ease-out;<br>&#125;<br><span class="hljs-selector-tag">img</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-comment">/* 鼠标经过停止头像旋转 </span><br><span class="hljs-comment">  -webkit-animation-play-state:paused;</span><br><span class="hljs-comment">  animation-play-state:paused;*/</span><br>  <span class="hljs-comment">/* 鼠标经过头像旋转360度 */</span><br>  -webkit-<span class="hljs-attribute">transform</span>: rotateZ(<span class="hljs-number">360deg</span>);<br>  -moz-<span class="hljs-attribute">transform</span>: rotateZ(<span class="hljs-number">360deg</span>);<br>  <span class="hljs-attribute">transform</span>: rotateZ(<span class="hljs-number">360deg</span>);<br>&#125;<br><span class="hljs-comment">/* Z 轴旋转动画 */</span><br><span class="hljs-keyword">@-webkit-keyframes</span> play &#123;<br>  <span class="hljs-number">0%</span> &#123;<br>    -webkit-<span class="hljs-attribute">transform</span>: rotateZ(<span class="hljs-number">0deg</span>);<br>  &#125;<br>  <span class="hljs-number">100%</span> &#123;<br>    -webkit-<span class="hljs-attribute">transform</span>: rotateZ(-<span class="hljs-number">360deg</span>);<br>  &#125;<br>&#125;<br><span class="hljs-keyword">@-moz-keyframes</span> play &#123;<br>  <span class="hljs-number">0%</span> &#123;<br>    -moz-<span class="hljs-attribute">transform</span>: rotateZ(<span class="hljs-number">0deg</span>);<br>  &#125;<br>  <span class="hljs-number">100%</span> &#123;<br>    -moz-<span class="hljs-attribute">transform</span>: rotateZ(-<span class="hljs-number">360deg</span>);<br>  &#125;<br>&#125;<br><span class="hljs-keyword">@keyframes</span> play &#123;<br>  <span class="hljs-number">0%</span> &#123;<br>    <span class="hljs-attribute">transform</span>: rotateZ(<span class="hljs-number">0deg</span>);<br>  &#125;<br>  <span class="hljs-number">100%</span> &#123;<br>    <span class="hljs-attribute">transform</span>: rotateZ(-<span class="hljs-number">360deg</span>);<br>  &#125;<br>&#125;<br><span class="hljs-selector-class">.site-author-name</span> &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-variable">$site</span>-author-name-margin;<br>  <span class="hljs-attribute">text-align</span>: <span class="hljs-variable">$site</span>-author-name-align;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-variable">$site</span>-author-name-color;<br>  <span class="hljs-attribute">font-weight</span>: <span class="hljs-variable">$site</span>-author-name-weight;<br>&#125;<br><span class="hljs-selector-class">.site-description</span> &#123;<br>  <span class="hljs-attribute">margin-top</span>: <span class="hljs-variable">$site</span>-description-margin-top;<br>  <span class="hljs-attribute">text-align</span>: <span class="hljs-variable">$site</span>-description-align;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-variable">$site</span>-description-font-size;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-variable">$site</span>-description-color;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="4-点击即送社会主义核心价值观"><a href="#4-点击即送社会主义核心价值观" class="headerlink" title="4.点击即送社会主义核心价值观"></a>4.点击即送社会主义核心价值观</h1><p>新建themes/next/source/js/src/click-effect.js<br>内容如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-built_in">window</span>,<span class="hljs-built_in">document</span>,<span class="hljs-literal">undefined</span></span>)</span>&#123;<br><span class="hljs-keyword">var</span> hearts = [];<br><span class="hljs-keyword">var</span> source = [<span class="hljs-string">&quot;富强&quot;</span>,<span class="hljs-string">&quot;民主&quot;</span>,<span class="hljs-string">&quot;文明&quot;</span>,<span class="hljs-string">&quot;和谐&quot;</span>,<span class="hljs-string">&quot;自由&quot;</span>,<span class="hljs-string">&quot;平等&quot;</span>,<span class="hljs-string">&quot;公正&quot;</span>,<span class="hljs-string">&quot;法治&quot;</span>,<span class="hljs-string">&quot;敬业&quot;</span>,<span class="hljs-string">&quot;诚信&quot;</span>,<span class="hljs-string">&quot;友善&quot;</span>];<br><span class="hljs-built_in">window</span>.requestAnimationFrame = (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">window</span>.requestAnimationFrame ||<br>        <span class="hljs-built_in">window</span>.webkitRequestAnimationFrame ||<br>        <span class="hljs-built_in">window</span>.mozRequestAnimationFrame ||<br>        <span class="hljs-built_in">window</span>.oRequestAnimationFrame ||<br>        <span class="hljs-built_in">window</span>.msRequestAnimationFrame ||<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">callback</span>)</span>&#123;<br>            <span class="hljs-built_in">setTimeout</span>(callback,<span class="hljs-number">1000</span>/<span class="hljs-number">60</span>);<br>        &#125;<br>&#125;)();<br>init();<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">init</span>(<span class="hljs-params"></span>)</span>&#123;<br>    attachEvent();<br>    gameloop();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRandomKeyword</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> source[<span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * source.length)];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">gameloop</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;hearts.length;i++)&#123;<br>        <span class="hljs-keyword">if</span>(hearts[i].alpha &lt;=<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-built_in">document</span>.body.removeChild(hearts[i].el);<br>            hearts.splice(i,<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        hearts[i].y--;<br>        hearts[i].scale += <span class="hljs-number">0.004</span>;<br>        hearts[i].alpha -= <span class="hljs-number">0.013</span>;<br>        css(&#123;<br>            left: hearts[i].x + <span class="hljs-string">&#x27;px&#x27;</span>,<br>            top: hearts[i].y + <span class="hljs-string">&#x27;px&#x27;</span>,<br>            opacity: hearts[i].alpha,<br>            transform: <span class="hljs-string">&quot;scale(&quot;</span> + hearts[i].scale + <span class="hljs-string">&quot;) translate(-50%, 0)&quot;</span><br>        &#125;, hearts[i].el);<br>    &#125;<br>    requestAnimationFrame(gameloop);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">attachEvent</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> old = <span class="hljs-keyword">typeof</span> <span class="hljs-built_in">window</span>.onclick===<span class="hljs-string">&quot;function&quot;</span> &amp;&amp; <span class="hljs-built_in">window</span>.onclick;<br>    <span class="hljs-built_in">document</span>.onclick=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)</span>&#123;<br>        old &amp;&amp; old();<br>        createWord(event);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createWord</span>(<span class="hljs-params">event</span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> d = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;div&quot;</span>);<br>    hearts.push(&#123;<br>        el : d,<br>        x : event.clientX - <span class="hljs-number">5</span>,<br>        y : event.clientY - <span class="hljs-number">5</span>,<br>        scale : <span class="hljs-number">1</span>,<br>        alpha : <span class="hljs-number">1</span>,<br>        color : randomColor()<br>    &#125;);<br>    css(&#123;<br>        display: <span class="hljs-string">&#x27;inline-block&#x27;</span>,<br>        transform: <span class="hljs-string">&#x27;translate(-50%, 0)&#x27;</span>,<br>        position: <span class="hljs-string">&#x27;fixed&#x27;</span>,<br>        zIndex: <span class="hljs-string">&#x27;99999999&#x27;</span>,<br>        color: randomColor(),<br>        fontSize: <span class="hljs-string">&#x27;14px&#x27;</span><br>    &#125;, d);<br>    d.innerHTML = getRandomKeyword();<br>    <span class="hljs-built_in">document</span>.body.appendChild(d);<br>    d.onselectstart = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">css</span>(<span class="hljs-params">css, node</span>)</span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> index <span class="hljs-keyword">in</span> css) &#123;<br>        <span class="hljs-keyword">if</span> (css.hasOwnProperty(index)) &#123;<br>            node.style[index] = css[index];<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">randomColor</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;rgb(&quot;</span>+(~~(<span class="hljs-built_in">Math</span>.random()*<span class="hljs-number">255</span>))+<span class="hljs-string">&quot;,&quot;</span>+(~~(<span class="hljs-built_in">Math</span>.random()*<span class="hljs-number">255</span>))+<span class="hljs-string">&quot;,&quot;</span>+(~~(<span class="hljs-built_in">Math</span>.random()*<span class="hljs-number">255</span>))+<span class="hljs-string">&quot;)&quot;</span>;<br>&#125;<br>&#125;)(<span class="hljs-built_in">window</span>,<span class="hljs-built_in">document</span>);<br></code></pre></td></tr></table></figure><p>…<br>To Be Continued…</p>]]></content>
    
    
    <categories>
      
      <category>博客相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>建站</tag>
      
      <tag>前端</tag>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android 开发学习笔记（二）</title>
    <link href="/2018/12/13/Android_Develop_Learnning_2/"/>
    <url>/2018/12/13/Android_Develop_Learnning_2/</url>
    
    <content type="html"><![CDATA[<h1 id="AndroidManifest-xml"><a href="#AndroidManifest-xml" class="headerlink" title="AndroidManifest.xml"></a>AndroidManifest.xml</h1><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">app/src/main/AndroidManifest.xml<br></code></pre></td></tr></table></figure><p>安装apk时，AndroidManifest.xml是软件包安装程序读取的文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml">    <span class="hljs-tag">&lt;<span class="hljs-name">activity</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;.MainActivity&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">intent-filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">category</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">intent-filter</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">activity</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这些代码注册了一个活动：MainActivity<br> <strong>所有的活动必须在AndroidManifest.xml中注册</strong><br> 所有用户可见的东西都在活动（Activity）中，其中  <strong>intent-filter</strong> 告诉系统 标签中的内容是主活动。</p><span id="more"></span> <hr><h1 id="初探活动Mainactivity"><a href="#初探活动Mainactivity" class="headerlink" title="初探活动Mainactivity"></a>初探活动Mainactivity</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.a1pine.mrtxn.myapplication;<br><br><span class="hljs-keyword">import</span> android.support.v7.app.AppCompatActivity;<br><span class="hljs-keyword">import</span> android.os.Bundle;<br><span class="hljs-keyword">import</span> android.widget.TextView;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AppCompatActivity</span> </span>&#123;<br><br><span class="hljs-comment">// Used to load the &#x27;native-lib&#x27; library on application startup.</span><br><span class="hljs-keyword">static</span> &#123;<br>    System.loadLibrary(<span class="hljs-string">&quot;native-lib&quot;</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> </span>&#123;<br>    <span class="hljs-keyword">super</span>.onCreate(savedInstanceState);<br>    setContentView(R.layout.activity_main);<br><br>    <span class="hljs-comment">// Example of a call to a native method</span><br>    TextView tv = (TextView) findViewById(R.id.sample_text);<br>    tv.setText(stringFromJNI());<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* A native method that is implemented by the &#x27;native-lib&#x27; native library,</span><br><span class="hljs-comment">* which is packaged with this application.</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">native</span> String <span class="hljs-title">stringFromJNI</span><span class="hljs-params">()</span></span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>MainActivity继承父类AppCompatActivity<br>AppCompatActivity是一种新的用来替换之前Activity的类，具有“Activity”的所有特性，且为MD设计提供了API支持。<br>onCreate()方法调用了setContextView()方法 给当前活动引入了一个main布局。</p><hr><h1 id="初探布局"><a href="#初探布局" class="headerlink" title="初探布局"></a>初探布局</h1><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">\app\src\main\layout\main.xml<br></code></pre></td></tr></table></figure><p>看到如下代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">android.support.constraint.ConstraintLayout</span>     <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:app</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">tools:context</span>=<span class="hljs-string">&quot;.MainActivity&quot;</span>&gt;</span><br><br>    &lt;TextView<br>        android:id=&quot;@+id/sample_text&quot;<br>        android:layout_width=&quot;wrap_content&quot;<br>        android:layout_height=&quot;wrap_content&quot;<br>        android:text=&quot;Hello World!&quot;<br>        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;<br>        app:layout_constraintLeft_toLeftOf=&quot;parent&quot;<br>        app:layout_constraintRight_toRightOf=&quot;parent&quot;<br>        app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">android.support.constraint.ConstraintLayout</span>&gt;</span> <br></code></pre></td></tr></table></figure><p>控制主界面上Hello World！的内容由android:text=”Hello World!”定义</p>]]></content>
    
    
    <categories>
      
      <category>Android应用开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android开发</tag>
      
      <tag>Android</tag>
      
      <tag>安卓</tag>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android 开发学习笔记（一）</title>
    <link href="/2018/12/10/Android_Develop_Learnning_1/"/>
    <url>/2018/12/10/Android_Develop_Learnning_1/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Android-项目结构"><a href="#1-Android-项目结构" class="headerlink" title="1.Android 项目结构"></a>1.Android 项目结构</h1><p><img src="/images/Android_Develop_Learnning_1/Android_Develop_Learnning_1.1.PNG"></p><h2 id="1-1-app：项目中和资源文件"><a href="#1-1-app：项目中和资源文件" class="headerlink" title="1.1 app：项目中和资源文件"></a>1.1 app：项目中和资源文件</h2><h3 id="1-1-1-app-build-编译过程产生的缓存文件"><a href="#1-1-1-app-build-编译过程产生的缓存文件" class="headerlink" title="1.1.1 app/build : 编译过程产生的缓存文件"></a>1.1.1 app/build : 编译过程产生的缓存文件</h3><h3 id="1-1-2-app-libs-放置第三方的Jar文件"><a href="#1-1-2-app-libs-放置第三方的Jar文件" class="headerlink" title="1.1.2 app/libs : 放置第三方的Jar文件"></a>1.1.2 app/libs : 放置第三方的Jar文件</h3><h3 id="1-1-3-app-androidTest-用来编写自动化测试"><a href="#1-1-3-app-androidTest-用来编写自动化测试" class="headerlink" title="1.1.3 app/androidTest : 用来编写自动化测试"></a>1.1.3 app/androidTest : 用来编写自动化测试</h3><h3 id="1-1-4-app-JAVA-存放Java代码"><a href="#1-1-4-app-JAVA-存放Java代码" class="headerlink" title="1.1.4 app/JAVA : 存放Java代码"></a>1.1.4 app/JAVA : 存放Java代码</h3><h3 id="1-1-5-app-res-资源文件夹，存放项目里所有的图片，布局，字符串资源"><a href="#1-1-5-app-res-资源文件夹，存放项目里所有的图片，布局，字符串资源" class="headerlink" title="1.1.5 app/res : 资源文件夹，存放项目里所有的图片，布局，字符串资源"></a>1.1.5 app/res : 资源文件夹，存放项目里所有的图片，布局，字符串资源</h3><h3 id="1-1-6-AndroidMainifest-xml"><a href="#1-1-6-AndroidMainifest-xml" class="headerlink" title="1.1.6 AndroidMainifest.xml"></a>1.1.6 AndroidMainifest.xml</h3><blockquote><p>Android 系统有四大组件，分别是 Activity （活动）, Service（服务）, Broadcast Receiver（广播接收器）和 Content Provider（内容提供器）。无论多么复杂的程序都是由四大组件构成的。一个程序你能看到的界面，都是活动；退出了仍然在后台运行的，都是服务；能被一些情景，像电话，网络状态变化等唤醒的都是广播接收器；能跨程序共享数据的，都是内容提供器。</p></blockquote><h2 id="1-2-gradle和-idea-Android-Studio自动生成-无需编辑"><a href="#1-2-gradle和-idea-Android-Studio自动生成-无需编辑" class="headerlink" title="1.2 .gradle和.idea : Android Studio自动生成 无需编辑"></a>1.2 .gradle和.idea : Android Studio自动生成 无需编辑</h2><h2 id="1-3-build-编译过程产生的缓存文件"><a href="#1-3-build-编译过程产生的缓存文件" class="headerlink" title="1.3 build : 编译过程产生的缓存文件"></a>1.3 build : 编译过程产生的缓存文件</h2><h2 id="1-4-gradle-保存gradle-wrapper的配置文件"><a href="#1-4-gradle-保存gradle-wrapper的配置文件" class="headerlink" title="1.4 gradle :  保存gradle wrapper的配置文件"></a>1.4 gradle :  保存gradle wrapper的配置文件</h2><h2 id="1-5-gitgnore-排除在版本控制以外的文件和目录"><a href="#1-5-gitgnore-排除在版本控制以外的文件和目录" class="headerlink" title="1.5 .gitgnore : 排除在版本控制以外的文件和目录"></a>1.5 .gitgnore : 排除在版本控制以外的文件和目录</h2>]]></content>
    
    
    <categories>
      
      <category>Android应用开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android开发</tag>
      
      <tag>Android</tag>
      
      <tag>安卓</tag>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>刷机包是怎样炼成的！（二）</title>
    <link href="/2018/07/21/the_way_to_an_android_rom_2/"/>
    <url>/2018/07/21/the_way_to_an_android_rom_2/</url>
    
    <content type="html"><![CDATA[<p>刷机包是怎样炼成的！（二）<br>1.本文使用Markdown编写 请复制到支持Markdown的文本浏览器内以获取最佳阅读效果<br>2.本文所有代码使用Java格式高亮 然而所有代码并不是Java 而是Edify语言<br>3.获取最新更新内容请关注新浪微博@A1pine<br>欢迎来到刷机玩家终极进阶教程的第二篇。</p><p>上一篇，我们讲到了刷机包的基本结构。作为系列的第一篇，作用当然是让大家对整体结构有一定的了解。上一篇所讲的知识，虽然繁多但多不深入。上一篇发表后，可谓是酷安引起了轰动。在发布后的1个小时，我收到了150余条回复和几百条几百条收藏，看到那篇文章能够如此受欢迎，我怀着惊喜和满足回复完了所有150余条回复，然而，我没想到的是，在短短的一夜过后，阅读，收藏，评论量翻了几番，我很想一一解答你们的问题，然而因为正处于考试周，并没有太多的时间来一一回复，在这里，先给有疑问却没收到我的答复的酷友们道一句抱歉。在这里，我也号召那些对刷机颇有研究的酷友，和我一起为其他酷友答疑解惑，谢谢。</p><p>第二件事，是关于本系列的安排，我计划将本系列分为六个章节，第一章讲了刷机包的大体结构，这一章是第二章，所要提到的内容是updater-script，即刷机脚本的常见命令。下一次，主要讲的是boot.img的主要结构，第四章讲system的主要结构，第五章会提到底包中中各个文件的作用。第六章，也就是全系列的最后一章，我会以一次移植为例子，讲解制作刷机包时，我们都干了些什么，这些操作的目的是什么。更新周期大概在1-2周。重点（敲黑板）主要是三四五三章。</p><p>好了，话不多说，让我们进入到今天的学习当中吧</p><p>首先我们打开updater-script（以一加5 氢OS7.1.1 稳定版为例）</p><p><img src="/images/the_way_to_an_android_rom_2/the_way_to_an_android_rom_2.1.jpg"></p><p>看到第一句，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs edify">getprop(&quot;ro.display.series&quot;) &#x3D;&#x3D; &quot;OnePlus 5&quot; || abort(&quot;E3004: This package is for \&quot;OnePlus 5\&quot; devices; this is a \&quot;&quot; + getprop(&quot;ro.display.series&quot;) + &quot;\&quot;.&quot;)<br></code></pre></td></tr></table></figure><p>第一句是机型验证，作用是防止刷机包被不兼容的机型刷入</p><p>这句话翻译成中文是</p><p>如果ro.display.series的值不是”OnePlus 5”，就报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs edify">E3004: This package is for \&quot;OnePlus 5\&quot; devices; this is a \&quot;&quot; + ro.display.series 中的中的值&quot;) + &quot;\&quot;.&quot;<br></code></pre></td></tr></table></figure><span id="more"></span> <p>相信只要你会任何一门程序语言，读懂这句话都不在话下，可以瞥见，ro.display.series 中的值就是机型的代号，如果该代号和刷机包期待的代号不相符，就会报错不进入刷机过程。</p><p>第二行是 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs edify">show_progress(0.750000, 0);<br></code></pre></td></tr></table></figure><p>这个能在updater-script中多处见到，它的作用主要是显示刷机的进度，让刷机者在过程中能看到进度条的更新而不是误以为手机死机。</p><p>它的用法是showprogress（进度向前移动x（完成度等于1为完成）, 可能需要消耗的时间（单位s）) 比如图中这句话</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs edify">show_progress(0.750000, 0);<br></code></pre></td></tr></table></figure><p>意思是，该操作可能需要0秒完成，完成后总进度向前进百分之75。</p><p>然后第三句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs edify">ui_print(&quot;Patching system image unconditionally...&quot;);<br></code></pre></td></tr></table></figure><p>ui_print(“”)的作用是将引号内的话打印到屏幕上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs edify">ui_print(&quot;此乃教程第二篇&quot;);<br></code></pre></td></tr></table></figure><p>然后从第四句开始，重头戏来了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs edify">block_image_update(&quot;&#x2F;dev&#x2F;block&#x2F;bootdevice&#x2F;by-name&#x2F;system&quot;, package_extract_file(&quot;system.transfer.list&quot;), &quot;system.new.dat&quot;, &quot;system.patch.dat&quot;) ||<br><br>abort(&quot;E1001: Failed to update system image.&quot;);<br></code></pre></td></tr></table></figure><p>首先我们看这个语句分为三个函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs edify">block_image_update(x,y,z,w)<br><br>package_extract_file(&quot;system.transfer.list&quot;)<br><br></code></pre></td></tr></table></figure><p>和</p><p>abort(“E1001: Failed to update system image.”);</p><p>之前有提到过从Android 5.0开始支持dm-verity，所以必须按照block更新分区，block_image_update的意思，就是按block更新分区，函数内部有四个参数,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs edify">&quot;&#x2F;dev&#x2F;block&#x2F;bootdevice&#x2F;by-name&#x2F;system&quot;<br><br>package_extract_file(&quot;system.transfer.list&quot;)<br><br>&quot;system.new.dat&quot;,<br><br>&quot;system.patch.dat&quot;<br><br>system.transfer.list<br></code></pre></td></tr></table></figure><p>/dev/block/bootdevice/by-name/system指的是system分区</p><p>package_extract_file(“system.transfer.list”)将system.transfer.list提取出来传给了block_image_update</p><p>system.transfer.list中的内容跟block有关</p><p>system.transfer.list中的内容解释如下</p><p>第一行为版本号</p><p>第二行是需要写入的block总数（）</p><p>另外system.transfer.list还支持三种操作</p><p>erase 将目标分区的range清除；</p><p>zero 将目标分区的range使用0填充；</p><p>new: 将目标分区的range使用new_data文件填充；</p><p>system.patch.dat和system.patch.dat相信大家大家都不陌生</p><p>就是刷机包中的另外两个文件 我们的镜像主要就在system.patch.dat内。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs edify">||abort(&quot;E1001: Failed to update system image.&quot;);<br></code></pre></td></tr></table></figure><p>||abort(“E1001: Failed to update system image.”);的意思当然就是 如果解包失败，就警告后面的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs edify">package_extract_file(&quot;boot.img&quot;, &quot;&#x2F;dev&#x2F;block&#x2F;bootdevice&#x2F;by-name&#x2F;boot&quot;);<br></code></pre></td></tr></table></figure><p>和上面一样 将boot.img 解包到boot分区</p><p>在其他的升级脚本中，常见的还有</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs edify">mount(&quot;ext4&quot;, &quot;EMMC&quot;, &quot;&#x2F;dev&#x2F;block&#x2F;bootdevice&#x2F;by-name&#x2F;userdata&quot;, &quot;&#x2F;data&quot;);<br></code></pre></td></tr></table></figure><p>和Linux 一样 这是挂载了data 分区</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs edify">format(&quot;ext4&quot;, &quot;EMMC&quot;, &quot;&#x2F;dev&#x2F;block&#x2F;bootdevice&#x2F;by-name&#x2F;system&quot;, &quot;0&quot;, &quot;&#x2F;system&quot;);<br></code></pre></td></tr></table></figure><p>将system格式化</p><p>symlink &lt;目标&gt; &lt;目录&gt;</p><p>相当于linux中的ln命令 创建了一个软链接，在第二个参数下下创建第一个参数代表的文件的软链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs edify">set_metadata(&quot;&#x2F;system&#x2F;xbin&#x2F;shelld&quot;, &quot;uid&quot;, 0, &quot;gid&quot;, 1000, &quot;mode&quot;, 0754, &quot;capabilities&quot;, 0x0, &quot;selabel&quot;, &quot;u:object_r:system_file:s0&quot;);<br></code></pre></td></tr></table></figure><p>修改了目标目录的权限和组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs edify">unmount(&quot;&#x2F;system&quot;);<br></code></pre></td></tr></table></figure><p>解除system分区的挂载</p><p>好了 第二期就到这了，还是欢迎大家留言、转载、批评指正</p><p>另外 新浪微博**@A1pine** 求一波关注 以后更新在微博上也会发哦</p><p>#安卓日常# #玩机技巧# #刷机#</p><p>参考文献</p><ol><li><p><a href="http://zhebk.cn/Android/updater-script.html"> Android 刷机脚本updater-script 详解. </a></p></li><li><p><a href="https://blog.csdn.net/lewif/article/details/49124709"> 如何导出android系统中的某一分区 </a></p></li><li><p><a href="https://blog.csdn.net/ly890700/article/details/58696379"> aosp源码分析 5.0 BlockImageUpdateFn </a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/23632918">自用 updater-script 备忘</a></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>AndroidRom开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android开发</tag>
      
      <tag>Android</tag>
      
      <tag>安卓</tag>
      
      <tag>刷机</tag>
      
      <tag>玩机指南</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>刷机包是怎样炼成的！（一）</title>
    <link href="/2018/07/01/the_way_to_an_android_rom_1/"/>
    <url>/2018/07/01/the_way_to_an_android_rom_1/</url>
    
    <content type="html"><![CDATA[<p>————刷机包文件目录浅谈</p><p>都说刷机的最高境界就是会做包。作为一个爱刷机的人，有时候看着别的机型有各种各样的Rom，就会心生羡慕，MIUI，Flyme，Smartisan OS，魔趣，Linegeaos，Color OS，Funtouch OS，360 OS，甚至把时间线拉的再早些，IUNI OS，乐蛙，Fiui，想必每一个刷机佬都至少刷过其中的一种，也相信学会移植第三方Rom是每个刷机佬久久挥之不去的梦想。其实，第三方Rom的来源也是多样的，但是，由于Android系统构的特殊性，刷机包的结构大多相似，所以，谨以本系列，给各位酷友简单讲讲Android的刷机包文件目录，如有错误或者不够严谨的地方，欢迎指正。本文使用Markdown书写，请自行粘贴至支持Markdown的阅读器内以获取最佳阅读效果<br><strong>本文首发于酷安 转载请注明来源</strong></p><h1 id="根目录粗谈"><a href="#根目录粗谈" class="headerlink" title="根目录粗谈"></a>根目录粗谈</h1><p><img src="/images/the_way_to_an_android_rom_1/the_way_to_an_android_rom_1.1.jpg"></p><p>作为本系列的第一篇文章，我决定讲一讲Android刷机包的根目录，就是我们直接用压缩文件打开一个刷机包看到的目录，这个目录可能会由于机型的不同、系统版本的不同、开发者习惯的不同而千差万别，但是，从原理上讲，都是大同小异的。我会将这个部分分成两个部分</p><p>第一部分是通用部分，这一部分讲到的文件，在几乎所有的刷机包的根目录下均能看到。</p><h2 id="相同部分"><a href="#相同部分" class="headerlink" title="相同部分"></a>相同部分</h2><p>首先要讲的就是boot.img</p><p>boot.img内包含的是与系统启动需要加载的一些文件，这一部分也是一个移植的第三方Rom能否启动的决定性因素，这里就必须要讲到Android系统的启动流程。</p><p>从你按下Power键的那一刻起，首先工作起来的是Boot Loader，Boot Loader对于刷过机的朋友们来说并不陌生，它是在Android内核运行前加载的一部分小程序，它的作用也和它所在的位置有关，通过Boot Loader 我们可以加载内核到内存，使得我们手机的硬件得到初始化，这些和Linux的特性保持一致，由于本文只是一篇简述性的文章，所以在此不做过多的赘述，在这里贴出两篇较好的文章，方便有兴趣的读者们查阅</p><p>一篇是Android系统启动顺序(按下power键后所做的的工作) 来自CSDN <a href="http://dwz.cn/87kAeX"> http://dwz.cn/87kAeX </a></p><p>另一篇是Boot Loader 来自极客学院 <a href="http://wiki.jikexueyuan.com/project/learn-linux-step-by-step/boot-loader.html"> http://wiki.jikexueyuan.com/project/learn-linux-step-by-step/boot-loader.html </a></p><p>boot.img主要包含三部分文件头信息boot header、内核kernel 和 文件系统数据ramdisk。</p><span id="more"></span> <p>这些都是和启动相关的文件，简单的来讲，如果你在启动的时候只按了开机键，即系统认为这次启动是正常开机，手机就会加载boot.img内的文件使得正常进入到系统启动环节。</p><p>关于boot.img的具体结构，我后期会再写一篇文章做更详细的讲解，在此之前，如果你有逆向相关的知识，可以访问android boot.img 结构 来自CSDN <a href="http://dwz.cn/87l2fh"> http://dwz.cn/87l2fh </a></p><p>然后是最常见的META-INF</p><p><img src="/images/the_way_to_an_android_rom_1/the_way_to_an_android_rom_1.2.jpg"></p><p>在META-INF 有三个文件CERT.RSA，CERT.SF，MANIFEST.MF，这三个文件储存的是Rom的签名信息，这一部分牵涉到RSA加密的知识，和我们的讨论无关，大家如果有兴趣可以自行搜索了解。</p><p>META-INF还包含了一个文件夹com，将com展开有android和google两层，在android下一般会有metadata和otacert. Metadata的学术名称叫做“元数据”，它储存了描述设备信息及环境变量的数据。比如一些编译选项，签名公钥，时间戳以及设备型号。Otacert和设备的OTA升级有关。</p><p><img src="/images/the_way_to_an_android_rom_1/the_way_to_an_android_rom_1.3.jpg"></p><p>这些和我们要说的都没有太大的关系，我们要关注的主要内容在google/android下 这下面有两个文件update-binary和updater-script。做移植时主要要考虑的就是updater-script中的内容，它们决定了刷机包中的每个文件最终会到达哪个位置。而update-binary则不用修改，因为它像是一个二进制的脚本解释器，对updater-script中各类操作（函数）做了解释说明。</p><p><img src="/images/the_way_to_an_android_rom_1/the_way_to_an_android_rom_1.4.jpg"></p><h2 id="不同的地方…"><a href="#不同的地方…" class="headerlink" title="不同的地方…"></a>不同的地方…</h2><p>剩下来的又主要分为两个部分</p><h2 id="1-system部分"><a href="#1-system部分" class="headerlink" title="1. system部分"></a>1. system部分</h2><p>有的Rom直接就有System文件夹，这个直接对System进行修改便可，还有的只能看见system.new.dat、system.patch.dat、system.transfer.list三个文件，这种情况在安卓5.0以后较为常见，而且如果是原厂提供的包，一定是这种格式，因为Android 5.0开始支持dm-verity，所以必须按照block更新分区 要对它进行修改，必须解析system.transfer.list文件然后将system.new.dat解包为ext4格式system.img，才通过挂载system.img的方式将system文件提取出来，（相关软件会在文末给出）而打包成这个格式需要用到file_context文件，这个可以从boot.img中获取，值得注意的是，在升级到安卓7.0以后，file_context变成了file_context.bin需要用相关软件转化（[工具]( <a href="http://dwz.cn/87kA17">http://dwz.cn/87kA17</a> ）才能被读取。</p><h2 id="2-底包"><a href="#2-底包" class="headerlink" title="2. 底包"></a>2. 底包</h2><p>这里直接引用龙猪@马丁龙猪的话</p><blockquote><p>什么是底包？<br>我们平时刷第三方 ROM，实际上只是刷了 boot 和 system 两个分区（俗称内核和系统）。对于大多数手机来说，除了这两个分区，还包括了大家俗称的基带、Modem、TrustZone 等必不可少的分区。<br>这些分区的版本是需要和系统或内核里相关的驱动版本一致才可以正常工作。比方说，假如系统里的驱动更新了，而 TrustZone 没有更新，那么指纹传感器可能会不正常；Modem 版本不对，可能会没有网络。<br>来自<a href="https://bbs.mokeedev.com/t/topic/281/">MoKee Open Source Community</a> </p></blockquote><p><img src="/images/the_way_to_an_android_rom_1/the_way_to_an_android_rom_1.5.jpg"><br><img src="/images/the_way_to_an_android_rom_1/the_way_to_an_android_rom_1.6.jpg"></p><h3 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h3><ol><li>[SuperR’s Kitchen]( <a href="http://dwz.cn/87kAge">http://dwz.cn/87kAge</a> </li></ol><p>2.[解包+打包System.new.dat]( <a href="http://dwz.cn/87kAlX">http://dwz.cn/87kAlX</a> </p><p>3.[file_contexts.bin和file_contexts转换工具]( <a href="http://dwz.cn/87kA17">http://dwz.cn/87kA17</a> </p><p>参考文献</p><ol><li><p>[ROM包详解]( <a href="http://dwz.cn/87kAky">http://dwz.cn/87kAky</a> </p></li><li><p><a href="https://blog.csdn.net/lostinai/article/details/54694564">Android中签名原理和安全性分析之META-INF文件讲解</a> </p></li><li><p><a href="http://dwz.cn/87kAeX"> Android系统启动顺序(按下power键后所做的的工作)</a></p></li><li><p><a href="https://www.jianshu.com/p/4dc32cd64470">Android启动流程</a> </p></li><li><p><a href="http://dwz.cn/87l2fh">android boot.img 结构</a></p></li><li><p>[理解boot.img与静态分析Android/linux内核]( <a href="http://dwz.cn/87kAh4">http://dwz.cn/87kAh4</a> </p></li></ol><p>感谢所有以上工具和文章的作者和@LTDSA 这些天的帮助</p><p>#安卓日常# #玩机技巧# #刷机#</p><p>To Be Continued…</p>]]></content>
    
    
    <categories>
      
      <category>AndroidRom开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android开发</tag>
      
      <tag>Android</tag>
      
      <tag>安卓</tag>
      
      <tag>刷机</tag>
      
      <tag>玩机指南</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
