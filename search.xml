<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>CODEVSP2833 奇怪的梦境</title>
      <link href="/2018/12/20/CODEVS_P2833/"/>
      <url>/2018/12/20/CODEVS_P2833/</url>
      
        <content type="html"><![CDATA[<p>裸的拓扑排序，肯定还可以再优化，不过暴力出奇迹…<br>过段时间再填坑</p><h1 id="题目背景-Description"><a href="#题目背景-Description" class="headerlink" title="题目背景 Description"></a>题目背景 Description</h1><blockquote><p>Aiden陷入了一个奇怪的梦境：他被困在一个小房子中，墙上有很多按钮，还有一个屏幕，上面显示了一些信息。屏幕上说，要将所有按钮都按下才能出去，而又给出了一些信息，说明了某个按钮只能在另一个按钮按下之后才能按下，而没有被提及的按钮则可以在任何时候按下。可是Aiden发现屏幕上所给信息似乎有矛盾，请你来帮忙判断。</p></blockquote><h1 id="输入描述-Input-Description"><a href="#输入描述-Input-Description" class="headerlink" title="输入描述 Input Description"></a>输入描述 Input Description</h1><blockquote><p>第一行，两个数N，M，表示有编号为1…N这N个按钮，屏幕上有M条信息。<br>接下来的M行，每行两个数ai，bi，表示bi按钮要在ai之后按下。所给信息可能有重复，保证ai≠bi。</p></blockquote><h1 id="输出描述-Output-Description"><a href="#输出描述-Output-Description" class="headerlink" title="输出描述 Output Description"></a>输出描述 Output Description</h1><blockquote><p>若按钮能全部按下，则输出“o(∩_∩)o”。<br>若不能，第一行输出“T_T”，第二行输出因信息有矛盾而无法确认按下顺序的按钮的个数。输出不包括引号。</p></blockquote><h1 id="样例输入-Sample-Input"><a href="#样例输入-Sample-Input" class="headerlink" title="样例输入 Sample Input"></a>样例输入 Sample Input</h1><blockquote><p>3 3<br>1 2<br>2 3<br>3 2</p></blockquote><h1 id="样例输出-Sample-Output"><a href="#样例输出-Sample-Output" class="headerlink" title="样例输出 Sample Output"></a>样例输出 Sample Output</h1><blockquote><p>T_T<br>2</p></blockquote><h1 id="数据范围及提示-Data-Size-amp-Hint"><a href="#数据范围及提示-Data-Size-amp-Hint" class="headerlink" title="数据范围及提示 Data Size &amp; Hint"></a>数据范围及提示 Data Size &amp; Hint</h1><blockquote><p>对于30%的数据，保证0＜N≤100。<br>对于50%的数据，保证0＜N≤2000。<br>对于70%的数据，保证0＜N≤5000。<br>对于100%的数据，保证0＜N≤10000，0&lt;M≤2.5N。<br><a id="more"></a><br></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 300000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> from;</span><br><span class="line">  <span class="keyword">int</span> to;</span><br><span class="line">  <span class="keyword">int</span> next;</span><br><span class="line">&#125; edge[MAXN];</span><br><span class="line"><span class="keyword">int</span> s, t, edgecount = <span class="number">1</span>, pre[MAXN], innode[MAXN], circlecount;</span><br><span class="line"><span class="keyword">bool</span> deleted[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">  edge[edgecount].from = u;</span><br><span class="line">  edge[edgecount].to = v;</span><br><span class="line">  edge[edgecount].next = pre[u];</span><br><span class="line">  pre[u] = edgecount++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n, m;</span><br><span class="line">  <span class="built_in">memset</span>(pre, <span class="number">-1</span>, <span class="keyword">sizeof</span>(pre));</span><br><span class="line">  <span class="built_in">memset</span>(innode, <span class="number">0</span>, <span class="keyword">sizeof</span>(innode));</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; s &gt;&gt; t;</span><br><span class="line">    addedge(s, t);</span><br><span class="line">    innode[t]++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (innode[i] == <span class="number">0</span> &amp;&amp; !deleted[i]) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = pre[i]; j != <span class="number">-1</span>; j = edge[j].next) &#123;</span><br><span class="line">          innode[edge[j].to]--;</span><br><span class="line">        &#125;</span><br><span class="line">        deleted[i] = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    <span class="keyword">if</span> (innode[i] != <span class="number">0</span>) circlecount++;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (circlecount == <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"o(n_n)o"</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"T_T"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; circlecount;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 拓扑排序 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Noip2015 Day1 T2 信息传递</title>
      <link href="/2018/12/20/NOIP2015_Day1_T2/"/>
      <url>/2018/12/20/NOIP2015_Day1_T2/</url>
      
        <content type="html"><![CDATA[<p>梦开始结束的地方…<br>打了三个小时幻方的地方</p><h1 id="题目背景-Description"><a href="#题目背景-Description" class="headerlink" title="题目背景 Description"></a>题目背景 Description</h1><p>有个同学（编号为 1 到）正在玩一个信息传递的游戏。在游戏里每人都有一个固定的信息传递对象，其中，编号为的同学的信息传递对象是编号为的同学。游戏开始时，每人都只知道自己的生日。之后每一轮中，所有人会同时将自己当前所知的生日信息告诉各自的信息传递对象（注意：可能有人可以从若干人那里获取信息，但是每人只会把信息告诉一个人，即自己的信息传递对象）。当有人从别人口中得知自己的生日时，游戏结束。请问该游戏一共可以进行几轮？</p><h1 id="输入描述-Input-Description"><a href="#输入描述-Input-Description" class="headerlink" title="输入描述 Input Description"></a>输入描述 Input Description</h1><blockquote><p>输入共 2行。<br>第 1行包含1个正整数n，表示n个人<br>第 2 行包含n 个用空格隔开的正整数T1 ,T 2 ,……,Tn ， 其中第i个整数Ti表示编号为i的同学的信息传递对象是编号为 T i 的同学，Ti≤n 且 Ti≠i。<br>数据保证游戏一定会结束。</p></blockquote><h1 id="输出描述-Output-Description"><a href="#输出描述-Output-Description" class="headerlink" title="输出描述 Output Description"></a>输出描述 Output Description</h1><blockquote><p>输出共 1行，包含 1个整数，表示游戏一共可以进行多少轮。</p></blockquote><h1 id="样例输入-Sample-Input"><a href="#样例输入-Sample-Input" class="headerlink" title="样例输入 Sample Input"></a>样例输入 Sample Input</h1><blockquote><p>5<br>2 4 2 3 1</p></blockquote><h1 id="样例输出-Sample-Output"><a href="#样例输出-Sample-Output" class="headerlink" title="样例输出 Sample Output"></a>样例输出 Sample Output</h1><blockquote><p>3<br><a id="more"></a></p></blockquote><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 200001</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> from;</span><br><span class="line">  <span class="keyword">int</span> to;</span><br><span class="line">  <span class="keyword">int</span> next;</span><br><span class="line">&#125; edge[MAXN];</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"><span class="keyword">int</span> pre[MAXN];</span><br><span class="line"><span class="keyword">int</span> DFN[MAXN], LOW[MAXN], timecount;</span><br><span class="line"><span class="keyword">int</span> edgecount = <span class="number">1</span>, mingame = <span class="number">0x7fffffff</span>, tot, sfront;</span><br><span class="line"><span class="keyword">bool</span> instack[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addnode</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">  edge[edgecount].from = u;</span><br><span class="line">  edge[edgecount].to = v;</span><br><span class="line">  edge[edgecount].next = pre[u];</span><br><span class="line">  pre[u] = edgecount++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">  LOW[u] = DFN[u] = ++timecount;</span><br><span class="line">  s.push(u);</span><br><span class="line">  instack[u] = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = pre[u]; i != <span class="number">-1</span>; i = edge[i].next) &#123;</span><br><span class="line">    <span class="keyword">if</span> (DFN[edge[i].to] == <span class="number">0</span>) &#123;</span><br><span class="line">      tarjan(edge[i].to);</span><br><span class="line">      LOW[u] = min(LOW[u], LOW[edge[i].to]);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (DFN[edge[i].to] != <span class="number">0</span> &amp;&amp; instack[edge[i].to] == <span class="number">1</span>) &#123;</span><br><span class="line">      LOW[u] = min(LOW[u], LOW[edge[i].to]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (LOW[u] == DFN[u]) &#123;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      sfront = s.top();</span><br><span class="line">      instack[sfront] = <span class="number">0</span>;</span><br><span class="line">      s.pop();</span><br><span class="line">      tot++;</span><br><span class="line">    &#125; <span class="keyword">while</span> (LOW[sfront] != DFN[sfront]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (tot &lt; mingame &amp;&amp; tot &gt; <span class="number">1</span>) mingame = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n, t;</span><br><span class="line">  <span class="built_in">memset</span>(pre, <span class="number">-1</span>, <span class="keyword">sizeof</span>(pre));</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    addnode(i, t);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    <span class="keyword">if</span> (DFN[i] == <span class="number">0</span>) tarjan(i);</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; mingame;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> Tarjan </tag>
            
            <tag> 强连通分量 </tag>
            
            <tag> DFS </tag>
            
            <tag> 有向图 </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CODEVSP2602 最短路径问题</title>
      <link href="/2018/12/19/CODEVS_P2602/"/>
      <url>/2018/12/19/CODEVS_P2602/</url>
      
        <content type="html"><![CDATA[<p>本来是想刷板子的，结果发现有个点怎么都过不了…<br>才发现是SPFA理解上出现了偏差，和<code>bfs</code>产生了混淆，问题就在于<code>bfs</code>中一个点出了队列就不可能重新进入队列，但是<code>SPFA</code>是有可能的。<br>那么当初考NOIP的时候有道题不会做能拿<code>SPFA</code>混20分完全就是运气好了… 顿时有一些小小的忧伤。</p><h1 id="题目背景-Description"><a href="#题目背景-Description" class="headerlink" title="题目背景 Description"></a>题目背景 Description</h1><p>平面上有n个点（n&lt;=100），每个点的坐标均在-10000~10000之间。其中的一些点之间有连线。若有连线，则表示可从一个点到达另一个点，即两点间有通路，通路的距离为两点间的直线距离。现在的任务是找出从一点到另一点之间的最短路径。</p><h1 id="输入描述-Input-Description"><a href="#输入描述-Input-Description" class="headerlink" title="输入描述 Input Description"></a>输入描述 Input Description</h1><blockquote><p>第一行为整数n。<br>第2行到第n+1行（共n行），每行两个整数x和y，描述了一个点的坐标。<br>第n+2行为一个整数m，表示图中连线的个数。<br>此后的m行，每行描述一条连线，由两个整数i和j组成，表示第i个点和第j个点之间有连线。<br>最后一行：两个整数s和t，分别表示源点和目标点。</p></blockquote><h1 id="输出描述-Output-Description"><a href="#输出描述-Output-Description" class="headerlink" title="输出描述 Output Description"></a>输出描述 Output Description</h1><blockquote><p>仅一行，一个实数（保留两位小数），表示从s到t的最短路径长度。</p></blockquote><h1 id="样例输入-Sample-Input"><a href="#样例输入-Sample-Input" class="headerlink" title="样例输入 Sample Input"></a>样例输入 Sample Input</h1><blockquote><p>5<br>0 0<br>2 0<br>2 2<br>0 2<br>3 1<br>5<br>1 2<br>1 3<br>1 4<br>2 5<br>3 5<br>1 5</p></blockquote><h1 id="样例输出-Sample-Output"><a href="#样例输出-Sample-Output" class="headerlink" title="样例输出 Sample Output"></a>样例输出 Sample Output</h1><blockquote><p>3.41<br><a id="more"></a></p></blockquote><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="SPFA"><a href="#SPFA" class="headerlink" title="SPFA"></a>SPFA</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">bool</span> visited[<span class="number">10010</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> from;</span><br><span class="line">    <span class="keyword">int</span> to;</span><br><span class="line">    <span class="keyword">double</span> weight;</span><br><span class="line">    <span class="keyword">int</span> next;</span><br><span class="line">&#125; edge[<span class="number">10010</span>];</span><br><span class="line"><span class="keyword">double</span> dis[<span class="number">10010</span>];</span><br><span class="line"><span class="keyword">int</span> x[<span class="number">10010</span>] , y[<span class="number">10010</span>] , pre[<span class="number">10010</span>] , edgecount;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getdistance</span><span class="params">(<span class="keyword">int</span> x1 , <span class="keyword">int</span> x2 , <span class="keyword">int</span> y1 , <span class="keyword">int</span> y2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>((x1-x2)*(x1-x2) + (y1-y2)*(y1-y2));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addnode</span><span class="params">(<span class="keyword">int</span> u , <span class="keyword">int</span> v , <span class="keyword">double</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[++edgecount].to = v;</span><br><span class="line">    edge[edgecount].from = u;</span><br><span class="line">    edge[edgecount].next = pre[u];</span><br><span class="line">    edge[edgecount].weight = w;</span><br><span class="line">    pre[u] = edgecount;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> s , <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.push(s);</span><br><span class="line">    visited[s] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        visited[temp] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = pre[temp] ; i != <span class="number">-1</span> ; i = edge[i].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">            <span class="keyword">if</span>(dis[v] &gt; dis[temp] + edge[i].weight)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[v] = dis[temp] + edge[i].weight;</span><br><span class="line">                <span class="keyword">if</span>(!visited[v])</span><br><span class="line">                &#123;</span><br><span class="line">                    q.push(v);</span><br><span class="line">                    visited[v] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s , t , n , m , p1 , p2;</span><br><span class="line">    <span class="keyword">double</span> distance;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x[i] &gt;&gt; y[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line">    <span class="built_in">memset</span>(pre , <span class="number">-1</span> , <span class="keyword">sizeof</span>(pre));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++)</span><br><span class="line">        dis[i] = <span class="number">0x7ffff</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= m ; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; p1 &gt;&gt; p2;</span><br><span class="line">        distance = getdistance(x[p1] , x[p2] , y[p1] , y[p2]);</span><br><span class="line">        addnode(p1 , p2 , distance);</span><br><span class="line">        addnode(p2 , p1 , distance);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; s &gt;&gt; t;</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    spfa(s,t);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.2lf"</span> , dis[t]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 2020</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> from;</span><br><span class="line">    <span class="keyword">int</span> to;</span><br><span class="line">    <span class="keyword">int</span> next;</span><br><span class="line">    <span class="keyword">double</span> weight;</span><br><span class="line">&#125; edge[MAXN];</span><br><span class="line"><span class="keyword">int</span> edgecount = <span class="number">1</span> , x[MAXN] , y[MAXN] , pre[MAXN] , n , m , p1 , p2 , s , t ;</span><br><span class="line"><span class="keyword">bool</span> visited[MAXN];</span><br><span class="line"><span class="keyword">double</span> dis[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getdistance</span><span class="params">(<span class="keyword">int</span> point1 , <span class="keyword">int</span> point2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> weight = <span class="built_in">sqrt</span>((x[point1] - x[point2])*(x[point1] - x[point2]) + (y[point1] - y[point2])*(y[point1] - y[point2]));</span><br><span class="line">    <span class="keyword">return</span> weight;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addnode</span><span class="params">(<span class="keyword">int</span> u , <span class="keyword">int</span> v ,<span class="keyword">double</span> w)</span> </span>&#123;</span><br><span class="line">    edge[edgecount].from = u;</span><br><span class="line">    edge[edgecount].to = v;</span><br><span class="line">    edge[edgecount].weight = w;</span><br><span class="line">    edge[edgecount].next = pre[u];</span><br><span class="line">    pre[u] = edgecount++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s , <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mini;</span><br><span class="line">    <span class="keyword">int</span> mini_num;</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    visited[s] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = pre[s] ; i != <span class="number">-1</span> ; i = edge[i].next)</span><br><span class="line">    &#123;</span><br><span class="line">        dis[edge[i].to] = edge[i].weight;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span> ; j &lt;= n<span class="number">-1</span> ; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        mini = <span class="number">0x7fffffff</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(mini &gt; dis[i] &amp;&amp; !visited[i])</span><br><span class="line">            &#123;</span><br><span class="line">                mini = dis[i];</span><br><span class="line">                mini_num = i;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        visited[mini_num] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = pre[mini_num] ; i != <span class="number">-1</span> ; i = edge[i].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(dis[edge[i].to] &gt; dis[mini_num] + edge[i].weight)</span><br><span class="line">                dis[edge[i].to] = dis[mini_num] + edge[i].weight;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dis[t];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(pre , <span class="number">-1</span> , <span class="keyword">sizeof</span>(pre));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span> , &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++)</span><br><span class="line">        dis[i] = <span class="number">0x7fffffff</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span> , &amp;x[i] , &amp;y[i]);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span> , &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= m ; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; p1 &gt;&gt; p2;</span><br><span class="line">        addnode(p1 , p2 , getdistance(p1 , p2));</span><br><span class="line">        addnode(p2 , p1 , getdistance(p1 , p2));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span> , &amp;s , &amp;t);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.2lf"</span> , dijkstra(s , t));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 邻接表 </tag>
            
            <tag> 最短路 </tag>
            
            <tag> SPFA </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>洛谷P1111 修复公路</title>
      <link href="/2018/12/18/luogu_P1111/"/>
      <url>/2018/12/18/luogu_P1111/</url>
      
        <content type="html"><![CDATA[<p>Kruskal模板题，应该还可以优化，过段时间再填坑…</p><h1 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h1><p>A地区在地震过后，连接所有村庄的公路都造成了损坏而无法通车。政府派人修复这些公路。</p><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给出A地区的村庄数N，和公路数M，公路是双向的。并告诉你每条公路的连着哪两个村庄，并告诉你什么时候能修完这条公路。问最早什么时候任意两个村庄能够通车，即最早什么时候任意两条村庄都存在至少一条修复完成的道路（可以由多条公路连成一条道路）</p><h1 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h1><h2 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h2><p>第1行两个正整数N,MN,M<br>下面M行，每行3个正整数x, y, t，告诉你这条公路连着x,y两个村庄，在时间t时能修复完成这条公路。</p><h2 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h2><p>如果全部公路修复完毕仍然存在两个村庄无法通车，则输出-1，否则输出最早什么时候任意两个村庄能够通车。<br><a id="more"></a></p><h1 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h1><h2 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h2><blockquote><p>4 4<br>1 2 6<br>1 3 4<br>1 4 5<br>4 2 3</p></blockquote><h2 id="输出样例1："><a href="#输出样例1：" class="headerlink" title="输出样例1："></a>输出样例1：</h2><blockquote><p>5</p></blockquote><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><blockquote><p>N ≤ 1000,M ≤ 100000 N ≤ 1000,M ≤ 100000<br>x ≤ N,y &lt;= N,t &lt;= 100000 x ≤ N,y ≤ N,t ≤ 100000</p></blockquote><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt; iostream &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt; algorithm &gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> from;</span><br><span class="line">    <span class="keyword">int</span> to;</span><br><span class="line">    <span class="keyword">int</span> cost;</span><br><span class="line">&#125;</span><br><span class="line">road[<span class="number">100000</span>];</span><br><span class="line"><span class="keyword">int</span> roadnum, n, m, totalcost;</span><br><span class="line"><span class="keyword">int</span> father[<span class="number">100000</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(edge x, edge y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.cost &lt; y.cost;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setfather</span><span class="params">()</span> </span>&#123;<span class="comment">//初始化函数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        father[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getfather</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="comment">//找爸爸</span></span><br><span class="line">    <span class="keyword">if</span> (father[x] != x) <span class="comment">//如果x的父节点不是x 那么x不是跟节点，所以继续找x的父节点的父节点</span></span><br><span class="line">        <span class="keyword">return</span> getfather(father[x]);</span><br><span class="line">    <span class="keyword">return</span> father[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unite</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; <span class="comment">//合并</span></span><br><span class="line">    x = getfather(x);</span><br><span class="line">    y = getfather(y);</span><br><span class="line">    <span class="keyword">if</span> (x != y) &#123; <span class="comment">// x ，y 不属于同一个集合就合并</span></span><br><span class="line">        father[y] = x; <span class="comment">//x 成为 y 的父节点</span></span><br><span class="line">        roadnum++; <span class="comment">//道路总数加一</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; road[i].from &gt;&gt; road[i].to &gt;&gt; road[i].cost;</span><br><span class="line">    sort(road + <span class="number">1</span>, road + m + <span class="number">1</span>, cmp); <span class="comment">//Kruskal 按边权升序排序</span></span><br><span class="line">    setfather(); <span class="comment">//初始化 令所有节点的父节点为本身（将点集加入新图）</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        unite(road[i].from, road[i].to); </span><br><span class="line">        <span class="keyword">if</span> (roadnum == n - <span class="number">1</span>) &#123; <span class="comment">//如果道路数等于村庄数减一，说明最小生成树已形成</span></span><br><span class="line">            totalcost = road[i].cost; <span class="comment">//总的时间消耗等于 消耗时间最长的那条路的时间消耗</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (roadnum != n - <span class="number">1</span>) <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span>; </span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; totalcost;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 算法与数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 图论 </tag>
            
            <tag> 并查集 </tag>
            
            <tag> 克鲁斯卡尔 </tag>
            
            <tag> Kruskal </tag>
            
            <tag> 最小生成树 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>博客建站记录(二)</title>
      <link href="/2018/12/15/blog_setup_2/"/>
      <url>/2018/12/15/blog_setup_2/</url>
      
        <content type="html"><![CDATA[<p>昨天测试了一下网页的打开速度，感觉还是稍慢了一点，于是今天就想把博客优化一下。<br>最简单的优化方式当然是用<code>gulp</code>把静态资源压缩了，可是<code>gulp</code>在4.0的时候更新了一些新的特性，导致网上的教程都失效了，我找了很长时间才发现。这里把新版的教程贴出来</p><h1 id="gulp简介"><a href="#gulp简介" class="headerlink" title="gulp简介"></a>gulp简介</h1><p><code>Gulp.js</code>(<a href="https://www.gulpjs.com.cn/" target="_blank" rel="noopener">官网</a>)是一种基于流的，代码优于配置的新一代构建工具。</p><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><h2 id="安装所需依赖"><a href="#安装所需依赖" class="headerlink" title="安装所需依赖"></a>安装所需依赖</h2><p>首先到根目录下执行<br></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="CMD"><figure class="iseeu highlight /cmd"><table><tr><td class="code"><pre><span class="line">npm install gulp-minify-css gulp-babel gulp-uglify gulp-htmlmin gulp-htmlclean --save-dev</span><br></pre></td></tr></table></figure></div><p></p><h2 id="安装gulp"><a href="#安装gulp" class="headerlink" title="安装gulp"></a>安装gulp</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="CMD"><figure class="iseeu highlight /cmd"><table><tr><td class="code"><pre><span class="line">npm install gulp -g</span><br></pre></td></tr></table></figure></div><a id="more"></a><h1 id="建立gulpfile-js"><a href="#建立gulpfile-js" class="headerlink" title="建立gulpfile.js"></a>建立gulpfile.js</h1><p>在根目录下新建一个<code>gulpfile.js</code>文件<br>一般来说直接安装<code>gulp</code>会安装最新版的，也就是4.0以上的，<code>gulp 4</code>最大的变化就是你不能像以前那样传递一个依赖任务列表，而必须制定是<code>gulp.series</code>(顺序执行<br>)还是<code>gulp.paralle</code>(并行计算)所以网上那些针对4.0以前的<code>gulpfile.js</code>都过时了，取而代之的是以下内容</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> babel = <span class="built_in">require</span>(<span class="string">'gulp-babel'</span>);</span><br><span class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>);</span><br><span class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">'gulp-htmlclean'</span>);</span><br><span class="line"><span class="keyword">var</span> imageMin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>);</span><br><span class="line"><span class="comment">// 压缩 public 目录 css</span></span><br><span class="line">gulp.task(<span class="string">'minify-css'</span>, gulp.series(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.css'</span>)</span><br><span class="line">    .pipe(minifycss())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;));</span><br><span class="line"><span class="comment">// 压缩 public 目录 html</span></span><br><span class="line">gulp.task(<span class="string">'minify-html'</span>, gulp.series(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.html'</span>)</span><br><span class="line">    .pipe(htmlclean())</span><br><span class="line">    .pipe(htmlmin(&#123;</span><br><span class="line">      removeComments: <span class="literal">true</span>,</span><br><span class="line">      minifyJS: <span class="literal">true</span>,</span><br><span class="line">      minifyCSS: <span class="literal">true</span>,</span><br><span class="line">      minifyURLs: <span class="literal">true</span>,</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./public'</span>))</span><br><span class="line">&#125;));</span><br><span class="line"><span class="comment">// 压缩 public/js 目录 js</span></span><br><span class="line">gulp.task(<span class="string">'minify-js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.js'</span>)</span><br><span class="line">          .pipe(uglify())</span><br><span class="line">          .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 压缩图片</span></span><br><span class="line">gulp.task(<span class="string">'images'</span>, gulp.series(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.&#123;png,jpg,gif,ico,svg&#125;'</span>)</span><br><span class="line">    .pipe(imageMin(&#123;</span><br><span class="line">      progressive: <span class="literal">true</span></span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./public'</span>))</span><br><span class="line">&#125;))</span><br><span class="line"><span class="comment">// 执行 gulp 命令时执行的任务</span></span><br><span class="line">gulp.task(<span class="string">'default'</span>, gulp.parallel(</span><br><span class="line">  <span class="string">'minify-html'</span>, <span class="string">'minify-css'</span>, <span class="string">'minify-js'</span>, <span class="string">'images'</span></span><br><span class="line">));</span><br></pre></td></tr></table></figure></div><p>当然最后是<code>gulp.parallel</code>还是<code>gulp.series</code>可以根据实际情况进行更改</p><h1 id="压缩方法"><a href="#压缩方法" class="headerlink" title="压缩方法"></a>压缩方法</h1><p>在进行<code>hexo g</code>和<code>hexo s</code>/<code>hexo d</code>中间加一行命令<code>gulp</code><br>执行结果如图<br><img src="/images/blog_setup2/blog_setup_2.1.PNG" alt=""><br>压缩之后的访问速度接近原来的两倍</p><h1 id="偷个小懒"><a href="#偷个小懒" class="headerlink" title="偷个小懒"></a>偷个小懒</h1><p>我们可以创建一个<code>publish</code>命令代替我们进行几次输入<br>打开根目录下的<code>package.json</code>然后在<code>scripts</code>下增加一个<code>publish</code>命令<br></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JSON"><figure class="iseeu highlight /json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"publish"</span>: <span class="string">"hexo cl &amp;&amp; hexo g &amp;&amp; gulp &amp;&amp; hexo d"</span>,</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"hexo cl &amp;&amp; hexo g &amp;&amp; gulp &amp;&amp; hexo s"</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p></p><p>然后部署和测试的时候只需要一行命令就可以搞定<br>测试:<br></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="CMD"><figure class="iseeu highlight /cmd"><table><tr><td class="code"><pre><span class="line">npm run test</span><br></pre></td></tr></table></figure></div><p></p><p>部署:<br></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="CMD"><figure class="iseeu highlight /cmd"><table><tr><td class="code"><pre><span class="line">npm run publish</span><br></pre></td></tr></table></figure></div><p></p>]]></content>
      
      
      <categories>
          
          <category> 博客相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 建站 </tag>
            
            <tag> 前端 </tag>
            
            <tag> 博客 </tag>
            
            <tag> 优化 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>博客建站记录（一）</title>
      <link href="/2018/12/14/blog_setup_1/"/>
      <url>/2018/12/14/blog_setup_1/</url>
      
        <content type="html"><![CDATA[<p>前几天心血来潮把博客迁移到GitHub Pages上来了，踩了很多很多坑，特开一文作为记录</p><h1 id="1-主题"><a href="#1-主题" class="headerlink" title="1.主题"></a>1.主题</h1><p>主题当然是用的 最常见的NexT.Pisces 版本是截止目前最新的v6.6.0，其实中途我也用过Material，无奈最后一次更新已是三个月前，而且稳定版都无法正常运行，在网上找到的解决方案，虽然能正常运行却也会报很多错，Next的更新很及时，也是最受到好评的模板之一。</p><h1 id="2-球型标签云"><a href="#2-球型标签云" class="headerlink" title="2.球型标签云"></a>2.球型标签云</h1><p>这个还算比较好实现，有了在Material上实现的经历，我把它移植到Next上只用了不到十分钟<br>用到的是一个叫做tagcanvas的js插件 <a href="http://www.goat1000.com/tagcanvas.php" target="_blank" rel="noopener">tagcanvas官方介绍页面</a><br>我用的是独立版的tagcanvas.js ,下载下来以后扔到themes/next/js下<br>修改themes/next/layout/_partial/page-tags.ejs如下<br><a id="more"></a><br></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;%- list_categories() %&gt;</span><br><span class="line">&lt;script src=&quot;/js/tagcanvas.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;div class=&quot;tags&quot; id=&quot;myTags&quot;&gt;</span><br><span class="line"> &lt;canvas width=&quot;350&quot; height=&quot;350&quot; id=&quot;my3DTags&quot;&gt;</span><br><span class="line">    &lt;p&gt;Anything in here will be replaced on browsers that support the canvas element&lt;/p&gt;</span><br><span class="line">&lt;/canvas&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;tags&quot; id=&quot;tags&quot;&gt;</span><br><span class="line"> &lt;ul&gt;</span><br><span class="line">  &lt;%- tagcloud(&#123;</span><br><span class="line">      min_font: 16,</span><br><span class="line">      max_font: 35,</span><br><span class="line">      amount: 999,</span><br><span class="line">      color: true,</span><br><span class="line">      start_color: &apos;blue&apos;,</span><br><span class="line">      end_color: &apos;red&apos;,</span><br><span class="line">  &#125;) %&gt;</span><br><span class="line"> &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">    .category-list li, .tags li&#123;</span><br><span class="line">        display: inline;</span><br><span class="line">        font-size: 1.2em;</span><br><span class="line">        margin-right: 1em;</span><br><span class="line">        line-height: 60px;</span><br><span class="line">        border: 1px solid lightgray;</span><br><span class="line">        padding: 6px;</span><br><span class="line">    &#125;</span><br><span class="line">    .category-list a &#123;</span><br><span class="line">        color: gray;</span><br><span class="line">    &#125;</span><br><span class="line">    .category-list:hover a &#123;</span><br><span class="line">        color: gray;</span><br><span class="line">        text-decoration: none;</span><br><span class="line">        font-weight: bold;</span><br><span class="line">    &#125;</span><br><span class="line">    .category-list-count &#123;</span><br><span class="line">        margin-left: 2px;</span><br><span class="line">        font-size: .9em;</span><br><span class="line">    &#125;</span><br><span class="line">    .article-entry ul li:before&#123;</span><br><span class="line">        display: none;</span><br><span class="line">    &#125;</span><br><span class="line">    .article-inner  &#123;</span><br><span class="line">        text-align: center;</span><br><span class="line">    &#125;</span><br><span class="line">    .article-meta &#123;</span><br><span class="line">        display: none;</span><br><span class="line">    &#125;</span><br><span class="line">    .article-header &#123;</span><br><span class="line">        padding-right: 35px;</span><br><span class="line">    &#125;</span><br><span class="line">    #container .article .article-title &#123;</span><br><span class="line">        padding-right: 0;</span><br><span class="line">    &#125;</span><br><span class="line">    .tags &#123;</span><br><span class="line">        max-width: 40em;</span><br><span class="line">        margin: 2em auto;</span><br><span class="line">        margin-top: 0em;</span><br><span class="line">    &#125;</span><br><span class="line">    .tags a &#123;</span><br><span class="line">        margin-right: 1em;</span><br><span class="line">        line-height: 65px;</span><br><span class="line">        border-bottom: 1px solid gray;</span><br><span class="line">    &#125;</span><br><span class="line">    .tags a:hover &#123;</span><br><span class="line">        font-weight: bold;</span><br><span class="line">        text-decoration: none;</span><br><span class="line">    &#125;</span><br><span class="line">    .category-list-child &#123;</span><br><span class="line">        display: none;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    window.onload = function() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">          TagCanvas.Start(&apos;my3DTags&apos;,&apos;tags&apos;,&#123;</span><br><span class="line">            textFont: &apos;Georgia,Optima&apos;,</span><br><span class="line">            textColour: null,</span><br><span class="line">            outlineColour: &apos;#ff00ff&apos;,</span><br><span class="line">            weight: true,</span><br><span class="line">            reverse: true,</span><br><span class="line">            depth: 0.8,</span><br><span class="line">            maxSpeed: 0.05,</span><br><span class="line">            bgRadius: 1,</span><br><span class="line">            freezeDecel: true</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125; catch(e) &#123;</span><br><span class="line">          // something went wrong, hide the canvas container</span><br><span class="line">          document.getElementById(&apos;myTags&apos;).style.display = &apos;none&apos;;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div><p></p><p>配置参数在TagCanvas.Start();参数表中，<a href="http://www.goat1000.com/tagcanvas-options.php" target="_blank" rel="noopener">这里</a>有具体配置选项</p><p>接着打开\themes\next\layout_macro\sidebar.swig 在<br></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&#123;% if site.tags.length &gt; 0 %&#125;</span><br><span class="line">            &lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot; src=&quot;/js/tagcloud.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">            &lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot; src=&quot;/js/tagcanvas.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">            &lt;div class=&quot;widget-wrap&quot;&gt;</span><br><span class="line">            &lt;h3 class=&quot;widget-title&quot;&gt;&lt;/h3&gt;</span><br><span class="line">            &lt;div id=&quot;myCanvasContainer&quot; class=&quot;widget tagcloud&quot;&gt;</span><br><span class="line">                &lt;canvas width=&quot;225&quot; height=&quot;225&quot; id=&quot;resCanvas&quot; style=&quot;width=100%&quot;&gt;</span><br><span class="line">                    &#123;&#123; list_tags() &#125;&#125;</span><br><span class="line">                &lt;/canvas&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br></pre></td></tr></table></figure></div><p></p><p>下方加入<br></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&#123;% if site.tags.length &gt; 0 %&#125;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot; src=&quot;/js/tagcloud.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">     &lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot; src=&quot;/js/tagcanvas.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;div class=&quot;widget-wrap&quot;&gt;</span><br><span class="line">            &lt;h3 class=&quot;widget-title&quot;&gt;&lt;/h3&gt;</span><br><span class="line">            &lt;div id=&quot;myCanvasContainer&quot; class=&quot;widget tagcloud&quot;&gt;</span><br><span class="line">      &lt;canvas width=&quot;225&quot; height=&quot;225&quot; id=&quot;resCanvas&quot;style=&quot;width=100%&quot;&gt;</span><br><span class="line">                    &#123;&#123; list_tags() &#125;&#125;</span><br><span class="line">                &lt;/canvas&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></div><p></p><p>参考 <a href="http://www.netcan666.com/2015/12/15/Hexo%E4%B8%AA%E6%80%A7%E5%8C%96%E7%90%83%E5%BD%A2%E6%A0%87%E7%AD%BE%E4%BA%91/#%E6%95%88%E6%9E%9C%E5%9B%BE" target="_blank" rel="noopener">Netcan_Space</a></p><h1 id="3-旋转头像"><a href="#3-旋转头像" class="headerlink" title="3.旋转头像"></a>3.旋转头像</h1><p>修改themes/next/source/css/_common/components/sidebar/sidebar-author.styl<br></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="STYLUS"><figure class="iseeu highlight /stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.site-author-image</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="variable">$site</span>-author-image-padding;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="variable">$site</span>-author-image-width;</span><br><span class="line">  <span class="attribute">height</span>: <span class="variable">$site</span>-author-image-height;</span><br><span class="line">  <span class="attribute">border</span>: <span class="variable">$site</span>-author-image-border-width solid <span class="variable">$site</span>-author-image-border-color;</span><br><span class="line">  <span class="comment">/* 头像圆形 */</span></span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">80px</span>;</span><br><span class="line">  -webkit-<span class="attribute">border-radius</span>: <span class="number">80px</span>;</span><br><span class="line">  -moz-<span class="attribute">border-radius</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: inset <span class="number">0</span> -<span class="number">1px</span> <span class="number">0</span> <span class="number">#333</span>sf;</span><br><span class="line">  <span class="comment">/* 设置循环动画 [animation: (play)动画名称 (2s)动画播放时长单位秒或微秒 (ase-out)动画播放的速度曲线为以低速结束 </span></span><br><span class="line"><span class="comment">    (1s)等待1秒然后开始动画 (1)动画播放次数(infinite为循环播放) ]*/</span></span><br><span class="line">  -webkit-<span class="attribute">animation</span>: play <span class="number">2s</span> ease-out <span class="number">1s</span> <span class="number">1</span>;</span><br><span class="line">  -moz-<span class="attribute">animation</span>: play <span class="number">2s</span> ease-out <span class="number">1s</span> <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">animation</span>: play <span class="number">2s</span> ease-out <span class="number">1s</span> <span class="number">1</span>; </span><br><span class="line">  <span class="comment">/* 鼠标经过头像旋转360度 */</span></span><br><span class="line">  -webkit-<span class="attribute">transition</span>: -webkit-transform <span class="number">1.5s</span> ease-out;</span><br><span class="line">  -moz-<span class="attribute">transition</span>: -moz-transform <span class="number">1.5s</span> ease-out;</span><br><span class="line">  <span class="attribute">transition</span>: transform <span class="number">1.5s</span> ease-out;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span>:hover &#123;</span><br><span class="line">  <span class="comment">/* 鼠标经过停止头像旋转 </span></span><br><span class="line"><span class="comment">  -webkit-animation-play-state:paused;</span></span><br><span class="line"><span class="comment">  animation-play-state:paused;*/</span></span><br><span class="line">  <span class="comment">/* 鼠标经过头像旋转360度 */</span></span><br><span class="line">  -webkit-<span class="attribute">transform</span>: rotateZ(<span class="number">360deg</span>);</span><br><span class="line">  -moz-<span class="attribute">transform</span>: rotateZ(<span class="number">360deg</span>);</span><br><span class="line">  <span class="attribute">transform</span>: rotateZ(<span class="number">360deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* Z 轴旋转动画 */</span></span><br><span class="line">@-webkit-keyframes play &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: rotateZ(<span class="number">0deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: rotateZ(-<span class="number">360deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@-moz-keyframes play &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    -moz-<span class="attribute">transform</span>: rotateZ(<span class="number">0deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    -moz-<span class="attribute">transform</span>: rotateZ(-<span class="number">360deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@keyframes play &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: rotateZ(<span class="number">0deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: rotateZ(-<span class="number">360deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.site-author-name</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="variable">$site</span>-author-name-margin;</span><br><span class="line">  <span class="attribute">text-align</span>: <span class="variable">$site</span>-author-name-align;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$site</span>-author-name-color;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="variable">$site</span>-author-name-weight;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.site-description</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="variable">$site</span>-description-margin-top;</span><br><span class="line">  <span class="attribute">text-align</span>: <span class="variable">$site</span>-description-align;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="variable">$site</span>-description-font-size;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$site</span>-description-color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p></p><h1 id="4-点击即送社会主义核心价值观"><a href="#4-点击即送社会主义核心价值观" class="headerlink" title="4.点击即送社会主义核心价值观"></a>4.点击即送社会主义核心价值观</h1><p>新建themes/next/source/js/src/click-effect.js<br>内容如下<br></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window,document,undefined</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> hearts = [];</span><br><span class="line"><span class="keyword">var</span> source = [<span class="string">"富强"</span>,<span class="string">"民主"</span>,<span class="string">"文明"</span>,<span class="string">"和谐"</span>,<span class="string">"自由"</span>,<span class="string">"平等"</span>,<span class="string">"公正"</span>,<span class="string">"法治"</span>,<span class="string">"敬业"</span>,<span class="string">"诚信"</span>,<span class="string">"友善"</span>];</span><br><span class="line"><span class="built_in">window</span>.requestAnimationFrame = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">window</span>.requestAnimationFrame ||</span><br><span class="line">        <span class="built_in">window</span>.webkitRequestAnimationFrame ||</span><br><span class="line">        <span class="built_in">window</span>.mozRequestAnimationFrame ||</span><br><span class="line">        <span class="built_in">window</span>.oRequestAnimationFrame ||</span><br><span class="line">        <span class="built_in">window</span>.msRequestAnimationFrame ||</span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>)</span>&#123;</span><br><span class="line">            setTimeout(callback,<span class="number">1000</span>/<span class="number">60</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;)();</span><br><span class="line">init();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    attachEvent();</span><br><span class="line">    gameloop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandomKeyword</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> source[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * source.length)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gameloop</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;hearts.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(hearts[i].alpha &lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">document</span>.body.removeChild(hearts[i].el);</span><br><span class="line">            hearts.splice(i,<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        hearts[i].y--;</span><br><span class="line">        hearts[i].scale += <span class="number">0.004</span>;</span><br><span class="line">        hearts[i].alpha -= <span class="number">0.013</span>;</span><br><span class="line">        css(&#123;</span><br><span class="line">            left: hearts[i].x + <span class="string">'px'</span>,</span><br><span class="line">            top: hearts[i].y + <span class="string">'px'</span>,</span><br><span class="line">            opacity: hearts[i].alpha,</span><br><span class="line">            transform: <span class="string">"scale("</span> + hearts[i].scale + <span class="string">") translate(-50%, 0)"</span></span><br><span class="line">        &#125;, hearts[i].el);</span><br><span class="line">    &#125;</span><br><span class="line">    requestAnimationFrame(gameloop);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">attachEvent</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> old = <span class="keyword">typeof</span> <span class="built_in">window</span>.onclick===<span class="string">"function"</span> &amp;&amp; <span class="built_in">window</span>.onclick;</span><br><span class="line">    <span class="built_in">document</span>.onclick=<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">        old &amp;&amp; old();</span><br><span class="line">        createWord(event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createWord</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> d = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">    hearts.push(&#123;</span><br><span class="line">        el : d,</span><br><span class="line">        x : event.clientX - <span class="number">5</span>,</span><br><span class="line">        y : event.clientY - <span class="number">5</span>,</span><br><span class="line">        scale : <span class="number">1</span>,</span><br><span class="line">        alpha : <span class="number">1</span>,</span><br><span class="line">        color : randomColor()</span><br><span class="line">    &#125;);</span><br><span class="line">    css(&#123;</span><br><span class="line">        display: <span class="string">'inline-block'</span>,</span><br><span class="line">        transform: <span class="string">'translate(-50%, 0)'</span>,</span><br><span class="line">        position: <span class="string">'fixed'</span>,</span><br><span class="line">        zIndex: <span class="string">'99999999'</span>,</span><br><span class="line">        color: randomColor(),</span><br><span class="line">        fontSize: <span class="string">'14px'</span></span><br><span class="line">    &#125;, d);</span><br><span class="line">    d.innerHTML = getRandomKeyword();</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(d);</span><br><span class="line">    d.onselectstart = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">css</span>(<span class="params">css, node</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> index <span class="keyword">in</span> css) &#123;</span><br><span class="line">        <span class="keyword">if</span> (css.hasOwnProperty(index)) &#123;</span><br><span class="line">            node.style[index] = css[index];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomColor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"rgb("</span>+(~~(<span class="built_in">Math</span>.random()*<span class="number">255</span>))+<span class="string">","</span>+(~~(<span class="built_in">Math</span>.random()*<span class="number">255</span>))+<span class="string">","</span>+(~~(<span class="built_in">Math</span>.random()*<span class="number">255</span>))+<span class="string">")"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)(<span class="built_in">window</span>,<span class="built_in">document</span>);</span><br></pre></td></tr></table></figure></div><p></p><p>…<br>To Be Continued…</p>]]></content>
      
      
      <categories>
          
          <category> 博客相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 建站 </tag>
            
            <tag> 前端 </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android 开发学习笔记（二）</title>
      <link href="/2018/12/13/Android_Develop_Learnning_2/"/>
      <url>/2018/12/13/Android_Develop_Learnning_2/</url>
      
        <content type="html"><![CDATA[<h1 id="AndroidManifest-xml"><a href="#AndroidManifest-xml" class="headerlink" title="AndroidManifest.xml"></a>AndroidManifest.xml</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="CMD"><figure class="iseeu highlight /cmd"><table><tr><td class="code"><pre><span class="line">app/src/main/AndroidManifest.xml</span><br></pre></td></tr></table></figure></div><p>安装apk时，AndroidManifest.xml是软件包安装程序读取的文件<br></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p></p><p>这些代码注册了一个活动：MainActivity<br><strong>所有的活动必须在AndroidManifest.xml中注册</strong><br>所有用户可见的东西都在活动（Activity）中，其中 <strong>intent-filter</strong> 告诉系统 标签中的内容是主活动。</p><a id="more"></a><hr><h1 id="初探活动Mainactivity"><a href="#初探活动Mainactivity" class="headerlink" title="初探活动Mainactivity"></a>初探活动Mainactivity</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.a1pine.mrtxn.myapplication;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Used to load the 'native-lib' library on application startup.</span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    System.loadLibrary(<span class="string">"native-lib"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Example of a call to a native method</span></span><br><span class="line">    TextView tv = (TextView) findViewById(R.id.sample_text);</span><br><span class="line">    tv.setText(stringFromJNI());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* A native method that is implemented by the 'native-lib' native library,</span></span><br><span class="line"><span class="comment">* which is packaged with this application.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">stringFromJNI</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><p>MainActivity继承父类AppCompatActivity<br>AppCompatActivity是一种新的用来替换之前Activity的类，具有“Activity”的所有特性，且为MD设计提供了API支持。<br>onCreate()方法调用了setContextView()方法 给当前活动引入了一个main布局。</p><hr><h1 id="初探布局"><a href="#初探布局" class="headerlink" title="初探布局"></a>初探布局</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="CMD"><figure class="iseeu highlight /cmd"><table><tr><td class="code"><pre><span class="line">\app\src\main\layout\main.xml</span><br></pre></td></tr></table></figure></div><p>看到如下代码<br></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.constraint.ConstraintLayout</span>     <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/sample_text"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"Hello World!"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintRight_toRightOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">android.support.constraint.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p></p><p>控制主界面上Hello World！的内容由android:text=”Hello World!”定义</p>]]></content>
      
      
      <categories>
          
          <category> Android应用开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android开发 </tag>
            
            <tag> Android </tag>
            
            <tag> 安卓 </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android 开发学习笔记（一）</title>
      <link href="/2018/12/10/Android_Develop_Learnning_1/"/>
      <url>/2018/12/10/Android_Develop_Learnning_1/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Android-项目结构"><a href="#1-Android-项目结构" class="headerlink" title="1.Android 项目结构"></a>1.Android 项目结构</h1><p><img src="/images/Android_Develop_Learnning_1/Android_Develop_Learnning_1.1.PNG" alt=""></p><h2 id="1-1-app：项目中和资源文件"><a href="#1-1-app：项目中和资源文件" class="headerlink" title="1.1 app：项目中和资源文件"></a>1.1 app：项目中和资源文件</h2><h3 id="1-1-1-app-build-编译过程产生的缓存文件"><a href="#1-1-1-app-build-编译过程产生的缓存文件" class="headerlink" title="1.1.1 app/build : 编译过程产生的缓存文件"></a>1.1.1 app/build : 编译过程产生的缓存文件</h3><h3 id="1-1-2-app-libs-放置第三方的Jar文件"><a href="#1-1-2-app-libs-放置第三方的Jar文件" class="headerlink" title="1.1.2 app/libs : 放置第三方的Jar文件"></a>1.1.2 app/libs : 放置第三方的Jar文件</h3><h3 id="1-1-3-app-androidTest-用来编写自动化测试"><a href="#1-1-3-app-androidTest-用来编写自动化测试" class="headerlink" title="1.1.3 app/androidTest : 用来编写自动化测试"></a>1.1.3 app/androidTest : 用来编写自动化测试</h3><h3 id="1-1-4-app-JAVA-存放Java代码"><a href="#1-1-4-app-JAVA-存放Java代码" class="headerlink" title="1.1.4 app/JAVA : 存放Java代码"></a>1.1.4 app/JAVA : 存放Java代码</h3><h3 id="1-1-5-app-res-资源文件夹，存放项目里所有的图片，布局，字符串资源"><a href="#1-1-5-app-res-资源文件夹，存放项目里所有的图片，布局，字符串资源" class="headerlink" title="1.1.5 app/res : 资源文件夹，存放项目里所有的图片，布局，字符串资源"></a>1.1.5 app/res : 资源文件夹，存放项目里所有的图片，布局，字符串资源</h3><h3 id="1-1-6-AndroidMainifest-xml"><a href="#1-1-6-AndroidMainifest-xml" class="headerlink" title="1.1.6 AndroidMainifest.xml"></a>1.1.6 AndroidMainifest.xml</h3><blockquote><p>Android 系统有四大组件，分别是 Activity （活动）, Service（服务）, Broadcast Receiver（广播接收器）和 Content Provider（内容提供器）。无论多么复杂的程序都是由四大组件构成的。一个程序你能看到的界面，都是活动；退出了仍然在后台运行的，都是服务；能被一些情景，像电话，网络状态变化等唤醒的都是广播接收器；能跨程序共享数据的，都是内容提供器。</p></blockquote><h2 id="1-2-gradle和-idea-Android-Studio自动生成-无需编辑"><a href="#1-2-gradle和-idea-Android-Studio自动生成-无需编辑" class="headerlink" title="1.2 .gradle和.idea : Android Studio自动生成 无需编辑"></a>1.2 .gradle和.idea : Android Studio自动生成 无需编辑</h2><h2 id="1-3-build-编译过程产生的缓存文件"><a href="#1-3-build-编译过程产生的缓存文件" class="headerlink" title="1.3 build : 编译过程产生的缓存文件"></a>1.3 build : 编译过程产生的缓存文件</h2><h2 id="1-4-gradle-保存gradle-wrapper的配置文件"><a href="#1-4-gradle-保存gradle-wrapper的配置文件" class="headerlink" title="1.4 gradle :  保存gradle wrapper的配置文件"></a>1.4 gradle : 保存gradle wrapper的配置文件</h2><h2 id="1-5-gitgnore-排除在版本控制以外的文件和目录"><a href="#1-5-gitgnore-排除在版本控制以外的文件和目录" class="headerlink" title="1.5 .gitgnore : 排除在版本控制以外的文件和目录"></a>1.5 .gitgnore : 排除在版本控制以外的文件和目录</h2>]]></content>
      
      
      <categories>
          
          <category> Android应用开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android开发 </tag>
            
            <tag> Android </tag>
            
            <tag> 安卓 </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>刷机包是怎样炼成的！（二）</title>
      <link href="/2018/07/21/the_way_to_an_android_rom_2/"/>
      <url>/2018/07/21/the_way_to_an_android_rom_2/</url>
      
        <content type="html"><![CDATA[<p>刷机包是怎样炼成的！（二）<br>1.本文使用Markdown编写 请复制到支持Markdown的文本浏览器内以获取最佳阅读效果<br>2.本文所有代码使用Java格式高亮 然而所有代码并不是Java 而是Edify语言<br>3.获取最新更新内容请关注新浪微博@A1pine<br>欢迎来到刷机玩家终极进阶教程的第二篇。</p><p>上一篇，我们讲到了刷机包的基本结构。作为系列的第一篇，作用当然是让大家对整体结构有一定的了解。上一篇所讲的知识，虽然繁多但多不深入。上一篇发表后，可谓是酷安引起了轰动。在发布后的1个小时，我收到了150余条回复和几百条几百条收藏，看到那篇文章能够如此受欢迎，我怀着惊喜和满足回复完了所有150余条回复，然而，我没想到的是，在短短的一夜过后，阅读，收藏，评论量翻了几番，我很想一一解答你们的问题，然而因为正处于考试周，并没有太多的时间来一一回复，在这里，先给有疑问却没收到我的答复的酷友们道一句抱歉。在这里，我也号召那些对刷机颇有研究的酷友，和我一起为其他酷友答疑解惑，谢谢。</p><p>第二件事，是关于本系列的安排，我计划将本系列分为六个章节，第一章讲了刷机包的大体结构，这一章是第二章，所要提到的内容是updater-script，即刷机脚本的常见命令。下一次，主要讲的是boot.img的主要结构，第四章讲system的主要结构，第五章会提到底包中中各个文件的作用。第六章，也就是全系列的最后一章，我会以一次移植为例子，讲解制作刷机包时，我们都干了些什么，这些操作的目的是什么。更新周期大概在1-2周。重点（敲黑板）主要是三四五三章。</p><p>好了，话不多说，让我们进入到今天的学习当中吧</p><p>首先我们打开updater-script（以一加5 氢OS7.1.1 稳定版为例）</p><p><img src="/images/the_way_to_an_android_rom_2/the_way_to_an_android_rom_2.1.jpg" alt=""></p><p>看到第一句，<br></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">getprop(&quot;ro.display.series&quot;) == &quot;OnePlus 5&quot; || abort(&quot;E3004: This package is for \&quot;OnePlus 5\&quot; devices; this is a \&quot;&quot; + getprop(&quot;ro.display.series&quot;) + &quot;\&quot;.&quot;)</span><br></pre></td></tr></table></figure></div><p></p><p>第一句是机型验证，作用是防止刷机包被不兼容的机型刷入</p><p>这句话翻译成中文是</p><p>如果ro.display.series的值不是”OnePlus 5”，就报错</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">E3004: This package is for \&quot;OnePlus 5\&quot; devices; this is a \&quot;&quot; + ro.display.series 中的中的值&quot;) + &quot;\&quot;.&quot;</span><br></pre></td></tr></table></figure></div><a id="more"></a><p>相信只要你会任何一门程序语言，读懂这句话都不在话下，可以瞥见，ro.display.series 中的值就是机型的代号，如果该代号和刷机包期待的代号不相符，就会报错不进入刷机过程。</p><p>第二行是<br></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">show_progress(0.750000, 0);</span><br></pre></td></tr></table></figure></div><p></p><p>这个能在updater-script中多处见到，它的作用主要是显示刷机的进度，让刷机者在过程中能看到进度条的更新而不是误以为手机死机。</p><p>它的用法是showprogress（进度向前移动x（完成度等于1为完成）, 可能需要消耗的时间（单位s）) 比如图中这句话</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">show_progress(0.750000, 0);</span><br></pre></td></tr></table></figure></div><p>意思是，该操作可能需要0秒完成，完成后总进度向前进百分之75。</p><p>然后第三句</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">ui_print(&quot;Patching system image unconditionally...&quot;);</span><br></pre></td></tr></table></figure></div><p>ui_print(“”)的作用是将引号内的话打印到屏幕上。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">ui_print(&quot;此乃教程第二篇&quot;);</span><br></pre></td></tr></table></figure></div><p>然后从第四句开始，重头戏来了</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">block_image_update(&quot;/dev/block/bootdevice/by-name/system&quot;, package_extract_file(&quot;system.transfer.list&quot;), &quot;system.new.dat&quot;, &quot;system.patch.dat&quot;) ||</span><br><span class="line"></span><br><span class="line">abort(&quot;E1001: Failed to update system image.&quot;);</span><br></pre></td></tr></table></figure></div><p>首先我们看这个语句分为三个函数</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">block_image_update(x,y,z,w)</span><br><span class="line"></span><br><span class="line">package_extract_file(&quot;system.transfer.list&quot;)</span><br></pre></td></tr></table></figure></div><p>和</p><p>abort(“E1001: Failed to update system image.”);</p><p>之前有提到过从Android 5.0开始支持dm-verity，所以必须按照block更新分区，block_image_update的意思，就是按block更新分区，函数内部有四个参数,</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">&quot;/dev/block/bootdevice/by-name/system&quot;</span><br><span class="line"></span><br><span class="line">package_extract_file(&quot;system.transfer.list&quot;)</span><br><span class="line"></span><br><span class="line">&quot;system.new.dat&quot;,</span><br><span class="line"></span><br><span class="line">&quot;system.patch.dat&quot;</span><br><span class="line"></span><br><span class="line">system.transfer.list</span><br></pre></td></tr></table></figure></div><p>/dev/block/bootdevice/by-name/system指的是system分区</p><p>package_extract_file(“system.transfer.list”)将system.transfer.list提取出来传给了block_image_update</p><p>system.transfer.list中的内容跟block有关</p><p>system.transfer.list中的内容解释如下</p><p>第一行为版本号</p><p>第二行是需要写入的block总数（）</p><p>另外system.transfer.list还支持三种操作</p><p>erase 将目标分区的range清除；</p><p>zero 将目标分区的range使用0填充；</p><p>new: 将目标分区的range使用new_data文件填充；</p><p>system.patch.dat和system.patch.dat相信大家大家都不陌生</p><p>就是刷机包中的另外两个文件 我们的镜像主要就在system.patch.dat内。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">||abort(&quot;E1001: Failed to update system image.&quot;);</span><br></pre></td></tr></table></figure></div><p>||abort(“E1001: Failed to update system image.”);的意思当然就是 如果解包失败，就警告后面的内容</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">package_extract_file(&quot;boot.img&quot;, &quot;/dev/block/bootdevice/by-name/boot&quot;);</span><br></pre></td></tr></table></figure></div><p>和上面一样 将boot.img 解包到boot分区</p><p>在其他的升级脚本中，常见的还有</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">mount(&quot;ext4&quot;, &quot;EMMC&quot;, &quot;/dev/block/bootdevice/by-name/userdata&quot;, &quot;/data&quot;);</span><br></pre></td></tr></table></figure></div><p>和Linux 一样 这是挂载了data 分区</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">format(&quot;ext4&quot;, &quot;EMMC&quot;, &quot;/dev/block/bootdevice/by-name/system&quot;, &quot;0&quot;, &quot;/system&quot;);</span><br></pre></td></tr></table></figure></div><p>将system格式化</p><p>symlink &lt;目标&gt; &lt;目录&gt;</p><p>相当于linux中的ln命令 创建了一个软链接，在第二个参数下下创建第一个参数代表的文件的软链接</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">set_metadata(&quot;/system/xbin/shelld&quot;, &quot;uid&quot;, 0, &quot;gid&quot;, 1000, &quot;mode&quot;, 0754, &quot;capabilities&quot;, 0x0, &quot;selabel&quot;, &quot;u:object_r:system_file:s0&quot;);</span><br></pre></td></tr></table></figure></div><p>修改了目标目录的权限和组</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="code"><pre><span class="line">unmount(&quot;/system&quot;);</span><br></pre></td></tr></table></figure></div><p>解除system分区的挂载</p><p>好了 第二期就到这了，还是欢迎大家留言、转载、批评指正</p><p>另外 新浪微博<strong>@A1pine</strong> 求一波关注 以后更新在微博上也会发哦</p><p>#安卓日常# #玩机技巧# #刷机#</p><p>参考文献</p><ol><li><p><a href="http://zhebk.cn/Android/updater-script.html" target="_blank" rel="noopener">Android 刷机脚本updater-script 详解.</a></p></li><li><p><a href="https://blog.csdn.net/lewif/article/details/49124709" target="_blank" rel="noopener">如何导出android系统中的某一分区</a></p></li><li><p><a href="https://blog.csdn.net/ly890700/article/details/58696379" target="_blank" rel="noopener">aosp源码分析 5.0 BlockImageUpdateFn</a></p></li><li><a href="https://zhuanlan.zhihu.com/p/23632918" target="_blank" rel="noopener">自用 updater-script 备忘</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> AndroidRom开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android开发 </tag>
            
            <tag> Android </tag>
            
            <tag> 安卓 </tag>
            
            <tag> 刷机 </tag>
            
            <tag> 玩机指南 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>刷机包是怎样炼成的！（一）</title>
      <link href="/2018/07/01/the_way_to_an_android_rom_1/"/>
      <url>/2018/07/01/the_way_to_an_android_rom_1/</url>
      
        <content type="html"><![CDATA[<p>————刷机包文件目录浅谈</p><p>都说刷机的最高境界就是会做包。作为一个爱刷机的人，有时候看着别的机型有各种各样的Rom，就会心生羡慕，MIUI，Flyme，Smartisan OS，魔趣，Linegeaos，Color OS，Funtouch OS，360 OS，甚至把时间线拉的再早些，IUNI OS，乐蛙，Fiui，想必每一个刷机佬都至少刷过其中的一种，也相信学会移植第三方Rom是每个刷机佬久久挥之不去的梦想。其实，第三方Rom的来源也是多样的，但是，由于Android系统构的特殊性，刷机包的结构大多相似，所以，谨以本系列，给各位酷友简单讲讲Android的刷机包文件目录，如有错误或者不够严谨的地方，欢迎指正。本文使用Markdown书写，请自行粘贴至支持Markdown的阅读器内以获取最佳阅读效果<br><strong>本文首发于酷安 转载请注明来源</strong></p><h1 id="根目录粗谈"><a href="#根目录粗谈" class="headerlink" title="根目录粗谈"></a>根目录粗谈</h1><p><img src="/images/the_way_to_an_android_rom_1/the_way_to_an_android_rom_1.1.jpg" alt=""></p><p>作为本系列的第一篇文章，我决定讲一讲Android刷机包的根目录，就是我们直接用压缩文件打开一个刷机包看到的目录，这个目录可能会由于机型的不同、系统版本的不同、开发者习惯的不同而千差万别，但是，从原理上讲，都是大同小异的。我会将这个部分分成两个部分</p><p>第一部分是通用部分，这一部分讲到的文件，在几乎所有的刷机包的根目录下均能看到。</p><h2 id="相同部分"><a href="#相同部分" class="headerlink" title="相同部分"></a>相同部分</h2><p>首先要讲的就是boot.img</p><p>boot.img内包含的是与系统启动需要加载的一些文件，这一部分也是一个移植的第三方Rom能否启动的决定性因素，这里就必须要讲到Android系统的启动流程。</p><p>从你按下Power键的那一刻起，首先工作起来的是Boot Loader，Boot Loader对于刷过机的朋友们来说并不陌生，它是在Android内核运行前加载的一部分小程序，它的作用也和它所在的位置有关，通过Boot Loader 我们可以加载内核到内存，使得我们手机的硬件得到初始化，这些和Linux的特性保持一致，由于本文只是一篇简述性的文章，所以在此不做过多的赘述，在这里贴出两篇较好的文章，方便有兴趣的读者们查阅</p><p>一篇是Android系统启动顺序(按下power键后所做的的工作) 来自CSDN <a href="http://dwz.cn/87kAeX" target="_blank" rel="noopener">http://dwz.cn/87kAeX</a></p><p>另一篇是Boot Loader 来自极客学院 <a href="http://wiki.jikexueyuan.com/project/learn-linux-step-by-step/boot-loader.html" target="_blank" rel="noopener">http://wiki.jikexueyuan.com/project/learn-linux-step-by-step/boot-loader.html</a></p><p>boot.img主要包含三部分文件头信息boot header、内核kernel 和 文件系统数据ramdisk。<br><a id="more"></a><br>这些都是和启动相关的文件，简单的来讲，如果你在启动的时候只按了开机键，即系统认为这次启动是正常开机，手机就会加载boot.img内的文件使得正常进入到系统启动环节。</p><p>关于boot.img的具体结构，我后期会再写一篇文章做更详细的讲解，在此之前，如果你有逆向相关的知识，可以访问android boot.img 结构 来自CSDN <a href="http://dwz.cn/87l2fh" target="_blank" rel="noopener">http://dwz.cn/87l2fh</a></p><p>然后是最常见的META-INF</p><p><img src="/images/the_way_to_an_android_rom_1/the_way_to_an_android_rom_1.2.jpg" alt=""></p><p>在META-INF 有三个文件CERT.RSA，CERT.SF，MANIFEST.MF，这三个文件储存的是Rom的签名信息，这一部分牵涉到RSA加密的知识，和我们的讨论无关，大家如果有兴趣可以自行搜索了解。</p><p>META-INF还包含了一个文件夹com，将com展开有android和google两层，在android下一般会有metadata和otacert. Metadata的学术名称叫做“元数据”，它储存了描述设备信息及环境变量的数据。比如一些编译选项，签名公钥，时间戳以及设备型号。Otacert和设备的OTA升级有关。</p><p><img src="/images/the_way_to_an_android_rom_1/the_way_to_an_android_rom_1.3.jpg" alt=""></p><p>这些和我们要说的都没有太大的关系，我们要关注的主要内容在google/android下 这下面有两个文件update-binary和updater-script。做移植时主要要考虑的就是updater-script中的内容，它们决定了刷机包中的每个文件最终会到达哪个位置。而update-binary则不用修改，因为它像是一个二进制的脚本解释器，对updater-script中各类操作（函数）做了解释说明。</p><p><img src="/images/the_way_to_an_android_rom_1/the_way_to_an_android_rom_1.4.jpg" alt=""></p><h2 id="不同的地方…"><a href="#不同的地方…" class="headerlink" title="不同的地方…"></a>不同的地方…</h2><p>剩下来的又主要分为两个部分</p><h2 id="1-system部分"><a href="#1-system部分" class="headerlink" title="1. system部分"></a>1. system部分</h2><p>有的Rom直接就有System文件夹，这个直接对System进行修改便可，还有的只能看见system.new.dat、system.patch.dat、system.transfer.list三个文件，这种情况在安卓5.0以后较为常见，而且如果是原厂提供的包，一定是这种格式，因为Android 5.0开始支持dm-verity，所以必须按照block更新分区 要对它进行修改，必须解析system.transfer.list文件然后将system.new.dat解包为ext4格式system.img，才通过挂载system.img的方式将system文件提取出来，（相关软件会在文末给出）而打包成这个格式需要用到file_context文件，这个可以从boot.img中获取，值得注意的是，在升级到安卓7.0以后，file_context变成了file_context.bin需要用相关软件转化（[工具]( <a href="http://dwz.cn/87kA17" target="_blank" rel="noopener">http://dwz.cn/87kA17</a> ）才能被读取。</p><h2 id="2-底包"><a href="#2-底包" class="headerlink" title="2. 底包"></a>2. 底包</h2><p>这里直接引用龙猪@马丁龙猪的话</p><blockquote><p>什么是底包？<br>我们平时刷第三方 ROM，实际上只是刷了 boot 和 system 两个分区（俗称内核和系统）。对于大多数手机来说，除了这两个分区，还包括了大家俗称的基带、Modem、TrustZone 等必不可少的分区。<br>这些分区的版本是需要和系统或内核里相关的驱动版本一致才可以正常工作。比方说，假如系统里的驱动更新了，而 TrustZone 没有更新，那么指纹传感器可能会不正常；Modem 版本不对，可能会没有网络。<br>来自<a href="https://bbs.mokeedev.com/t/topic/281/" target="_blank" rel="noopener">MoKee Open Source Community</a></p></blockquote><p><img src="/images/the_way_to_an_android_rom_1/the_way_to_an_android_rom_1.5.jpg" alt=""><br><img src="/images/the_way_to_an_android_rom_1/the_way_to_an_android_rom_1.6.jpg" alt=""></p><h3 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h3><ol><li>[SuperR’s Kitchen]( <a href="http://dwz.cn/87kAge" target="_blank" rel="noopener">http://dwz.cn/87kAge</a></li></ol><p>2.[解包+打包System.new.dat]( <a href="http://dwz.cn/87kAlX" target="_blank" rel="noopener">http://dwz.cn/87kAlX</a></p><p>3.[file_contexts.bin和file_contexts转换工具]( <a href="http://dwz.cn/87kA17" target="_blank" rel="noopener">http://dwz.cn/87kA17</a></p><p>参考文献</p><ol><li><p>[ROM包详解]( <a href="http://dwz.cn/87kAky" target="_blank" rel="noopener">http://dwz.cn/87kAky</a></p></li><li><p><a href="https://blog.csdn.net/lostinai/article/details/54694564" target="_blank" rel="noopener">Android中签名原理和安全性分析之META-INF文件讲解</a></p></li><li><p><a href="http://dwz.cn/87kAeX" target="_blank" rel="noopener">Android系统启动顺序(按下power键后所做的的工作)</a></p></li><li><p><a href="https://www.jianshu.com/p/4dc32cd64470" target="_blank" rel="noopener">Android启动流程</a></p></li><li><p><a href="http://dwz.cn/87l2fh" target="_blank" rel="noopener">android boot.img 结构</a></p></li><li><p>[理解boot.img与静态分析Android/linux内核]( <a href="http://dwz.cn/87kAh4" target="_blank" rel="noopener">http://dwz.cn/87kAh4</a></p></li></ol><p>感谢所有以上工具和文章的作者和@LTDSA 这些天的帮助</p><p>#安卓日常# #玩机技巧# #刷机#</p><p>To Be Continued…</p>]]></content>
      
      
      <categories>
          
          <category> AndroidRom开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android开发 </tag>
            
            <tag> Android </tag>
            
            <tag> 安卓 </tag>
            
            <tag> 刷机 </tag>
            
            <tag> 玩机指南 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
